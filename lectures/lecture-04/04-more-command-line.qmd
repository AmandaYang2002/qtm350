---
title: QTM 350 - Data Science Computing
subtitle: "Lecture 04: More on the Command Line"
date: 2024-09-09
date-format: "DD MMMM, YYYY"
author:
  - name: Danilo Freire
    email: danilo.freire@emory.edu
    affiliations: Department of Quantitative Theory and Methods <br> Emory University
format:
  clean-revealjs:
    self-contained: true
    footer: "[More CLI](https://danilofreire.github.io/qtm350/lectures/lecture-04/04-more-command-line.html)"
transition: slide
transition-speed: default
scrollable: true
engine: knitr
editor:
  render-on-save: true
---

```{r setup, include=FALSE}
# figures formatting setup
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
  prompt = T,
  fig.align="center", #fig.width=6, fig.height=4.5, 
  # out.width="748px", #out.length="520.75px",
  dpi=300, #fig.path='Figs/',
  cache=T, #echo=F, warning=F, message=F
  engine.opts = list(bash = "-l")
  )

## Next hook based on this SO answer: https://stackoverflow.com/a/39025054
knit_hooks$set(
  prompt = function(before, options, envir) {
    options(
      prompt = if (options$engine %in% c('sh','bash', 'zsh')) '$ ' else 'R> ',
      continue = if (options$engine %in% c('sh','bash', 'zsh')) '$ ' else '+ '
      )
})

options(repos = c(CRAN = "https://cran.rstudio.com/"))

packages <- c("tidyverse", "emo", "fontawesome", "reticulate")

for (package in packages) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    library(package, character.only = TRUE)
  }
}
```

# Recap and lecture overview `r emo::ji('books')`{background-color="#2d4563"}

## Brief recap of last class
### Early computing and data representation

:::{style="margin-top: 30px; font-size: 24px;"}

:::{.columns}
:::{.column width="50%"}
- Computers evolved from [people to mechanical calculators to silicon-based machines]{.alert}
- Modern computers use the [Von Neumann architecture]{.alert}, storing both instructions and data in memory
- Computers represent data using [binary (base 2) numbers]{.alert} made up of 0s and 1s
- A [bit]{.alert} is a single binary digit; [8 bits make a byte]{.alert}
- [Hexadecimal (base 16)]{.alert} is a compact way to represent binary, with each hex digit corresponding to 4 bits
- [Abstraction]{.alert} allows representing complex data like images and text using numbers
:::

:::{.column width="50%"}
![](figures/hexadecimal.png)
:::
:::
:::

# Managing your files `r emo::ji('file_folder')` {background-color="#2d4563"}

## Managing your files

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
::: {.column width="50%"}
-   The obvious next step after navigating the file system is managing files.

-   There's a lot you can do with files, including downloading, unzipping, copying, moving, renaming and deleting.

-   Again, doing this in a GUI is intuitive but usually scales badly.

-   We'll learn how to do these operations at scale using the shell.

-   Be careful when handling files in the shell though! Don't expect friendly reminders such as "Do you really want to delete this folder of pictures from your anniversary?"
:::

::: {.column width="50%"}
![](figures/organize.gif)
:::
:::
:::

## Create: `touch` and `mkdir`

:::{style="margin-top: 30px; font-size: 25px;"}
:::{.incremental}
One of the most common shell tasks is object creation (files, directories, etc.).

We use `mkdir` to create directories. E.g., to create a new "testing" directory we do:

```{bash, eval=FALSE, echo=TRUE}
mkdir testing
```

We use `touch` to create (empty) files. If the file(s) already exist, `touch` changes a file's "Access", "Modify" and "Change" timestamps to the current time and date. To add some files to our new directory, we do:

```{bash, eval=FALSE, echo=TRUE}
touch testing/test1.txt testing/test2.txt testing/test3.txt
```

Check that it worked:

```{bash, echo=TRUE}
ls testing
```
:::
:::

## Remove: `rm` and `rmdir`

:::{style="margin-top: 30px; font-size: 25px;"}
:::{.incremental}
Let's delete the objects that we just created. Start with one of the .txt files, by using `rm`. - We could delete all the files at the same time, but you'll see why I want to keep some.

```{bash, eval=FALSE, echo=TRUE}
rm testing/test1.txt
```

The equivalent command for directories is `rmdir`.

```{bash, eval=FALSE, echo=TRUE}
rmdir testing
```

Uh oh... It won't let us delete the directory while it still has files inside of it. The solution is to use the `rm` command again with the "recursive" (`-r` or `-R`) and "force" (`-f`) options. - Excluding the `-f` option is safer, but will trigger a confirmation prompt for every file, which I'd rather avoid here.

```{bash, eval=FALSE, echo=TRUE}
rm -rf testing ## Success
```
:::
:::

## Copy: `cp`

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
The syntax for copying is `$ cp object path/copyname`.

-   If you don't provide a new name for the copied object, it will just take the old name.

-   However, if there is already an object with the same name in the target destination, then you'll have to use `-f` to force an overwrite.

```{bash, echo=TRUE}
## Create new "copies" sub-directory
mkdir ./copies

## Now copy across a file (with a new name)
cp ./03-command-line.qmd ./copies/03-command-line-copy.qmd

## Show that we were successful
ls ./copies
```
:::

:::{.column width="50%"}
You can use `cp` to copy directories, although you'll need the `-r` flag if you want to recursively copy over everything inside of it too:

```{bash, echo=TRUE}
cp -r ./figures ./copies
ls ./copies/figures/
```
:::
:::
:::

## Move (and rename): `mv`

:::{style="margin-top: 30px; font-size: 25px;"}
The syntax for moving is `$ mv object path/newobjectname`

```{bash, echo=TRUE}
## Move a file to see how it works
mv ./abc.txt ./copies/abc.txt
ls ./copies
```
Note that "moving" an object within the same directory, but with specifying `newobjectname`, is effectively the same as renaming it.

```{bash mv3}
 ## Rename abc.txt by moving it to abc2.txt
mv ./copies/abc.txt ./copies/abc2.txt
ls ./copies
```
:::

## Wildcards

:::{style="margin-top: 30px; font-size: 25px;"}
[Wildcards](http://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm) are special characters that can be used as a replacement for other characters. The two most important ones are:

1.  Replace any number of characters with `*`.
  -   Convenient when you want to copy, move, or delete a whole class of files.

```{bash, echo=TRUE}
ls ./figures/*.gif # List all files in the "figures" directory that end with ".gif"
```

2.  Replace a single character with `?`
  -   Convenient when you want to discriminate between similarly named files.

```{bash, echo=TRUE}
ls ./figures/cl?.png ## List all files in the "figures" directory that start with "cl" and end with ".png"
```
:::

## Find

:::{style="margin-top: 30px; font-size: 23px;"}
The last command to mention is `find`.

This can be used to locate files and directories based on a variety of criteria; from pattern matching to object properties.

```{bash, echo=TRUE}
find . -iname "*.qmd" ## Must use "." to indicate pwd
```

```{bash, echo=TRUE}
find . -size +200k ## find files larger than 200 KB
```
:::

## File management exercise

# Next steps `r emo::ji('rocket')` {background-color="#2d4563"}

## Things we didn't cover here

:::{style="margin-top: 30px; font-size: 26px;"}
:::{.columns}
:::{.column width="50%"}
I hope that I've given you a sense of how the shell works and how powerful it is. My main goal has been to "demystify" the shell, so that you aren't intimidated when we use shell commands later on.

We didn't cover many things:

-   User roles and file permissions, environment variables, SSH, memory management (e.g. [top](https://ss64.com/bash/top.html) and [htop](https://hisham.hm/htop/)), GNU parallel, etc.

-   Automation; see [here](https://stat545.com/automation-overview.html), [here](https://books.ropensci.org/drake/index.html), and [here](https://web.stanford.edu/~gentzkow/research/CodeAndData.pdf) are great places to start learning about automation on your own.
:::

:::{.column width="50%"}
![](figures/next-steps.jpg)
:::
:::
:::

## Additional material

:::{style="margin-top: 30px;"}
If you want to dig deeper, check out

-   [The Unix Shell](http://swcarpentry.github.io/shell-novice/) (Software Carpentery)

-   [The Unix Workbench](https://seankross.com/the-unix-workbench/) (Sean Kross)

-   [Data Science at the Command Line](https://www.datascienceatthecommandline.com/) (Jeroen Janssens)

-   [Effective Shell](https://effective-shell.com/) (Dave Kerr)

-   [Efficient Way To Process Large Text/Log Files Using Awk With Python](https://techblogs.42gears.com/efficient-way-to-process-large-text-log-files-usin-wpython/)

-   [Using AWK and R to parse 25tb](https://livefreeordichotomize.com/posts/2019-06-04-using-awk-and-r-to-parse-25tb/) (Nick Strayer)

-   [`./jq`](https://jqlang.github.io/jq/)

-   [`awk`](https://en.wikipedia.org/wiki/AWK)
:::


