[
  {
    "objectID": "lectures/LICENSE.html",
    "href": "lectures/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#lecture-overview",
    "href": "lectures/lecture-01/01-introduction.html#lecture-overview",
    "title": "Welcome to Data Science Computing!",
    "section": "Lecture overview",
    "text": "Lecture overview\nOur agenda for today\n\n\n\nIntroduction\nMotivation\nClass logistics\nComputer set up"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#course-materials",
    "href": "lectures/lecture-01/01-introduction.html#course-materials",
    "title": "Welcome to Data Science Computing!",
    "section": "Course materials",
    "text": "Course materials\nImportant links\n\n Course repository: https://github.com/danilofreire/qtm350\n Course website: https://danilofreire.github.io/qtm350\nThis course is hosted on GitHub, which serves as our central hub for lecture materials, code examples, discussions, assignments, and final project guidelines. We will use Canvas for course administration, including submitting assignments, accessing grades, and receiving announcements. Please take some time to get to know both platforms, and reach out if you have any questions.\n\n\n\n\n\n\nNote\n\n\nPlease remember to check the course repository regularly for updates and announcements."
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#instructor",
    "href": "lectures/lecture-01/01-introduction.html#instructor",
    "title": "Welcome to Data Science Computing!",
    "section": "Instructor",
    "text": "Instructor\nA bit about me\n\n\n\n\n danilo.freire@emory.edu\n https://danilofreire.github.io/\n https://github.com/danilofreire/\n\n\n\n Visiting Assistant Professor in the QTM\n MA from the Graduate Institute Geneva, PhD from King‚Äôs College London, Postdoc at Brown University, Senior Lecturer at the University of Lincoln, UK.\n Research interests: computational social science, experimental methods, policy evaluation, political violence, organised crime."
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#what-about-you-time-permitting",
    "href": "lectures/lecture-01/01-introduction.html#what-about-you-time-permitting",
    "title": "Welcome to Data Science Computing!",
    "section": "What about you? (time permitting!)",
    "text": "What about you? (time permitting!)\n\nNow it‚Äôs your turn! üëã\n\nPlease introduce yourself, tell us your name, your major, one thing you really like, and something we don‚Äôt know about your city or country! üòä"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#my-teaching-philosophy",
    "href": "lectures/lecture-01/01-introduction.html#my-teaching-philosophy",
    "title": "Welcome to Data Science Computing!",
    "section": "My teaching philosophy",
    "text": "My teaching philosophy\n\n\nI love teaching and aim to make learning fun\nClasses where students participate are the best\nHands-on activities help you learn better\nI am always available to help and answer questions. And I mean it\nYour feedback helps me improve my teaching. Please let me know what is working and what is not"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#teaching-assistants",
    "href": "lectures/lecture-01/01-introduction.html#teaching-assistants",
    "title": "Welcome to Data Science Computing!",
    "section": "Teaching assistants",
    "text": "Teaching assistants\n\n\nThe teaching assistants for this course will be confirmed soon\nThey will be answering questions during our lectures and holding office hours (see Canvas or the course website for office hours information)\nThey will also be grading your assignments and quizzes (with my oversight)\nWe are all here to help you! So feel free to ask questions during class, office hours, or via email üòä"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#office-hours",
    "href": "lectures/lecture-01/01-introduction.html#office-hours",
    "title": "Welcome to Data Science Computing!",
    "section": "Office hours",
    "text": "Office hours\nWhat for and what not for\n\n\nWhat office hours are meant for:\n\nApplying tools in practice\nDiscussion of issues related to the assignments\nBoosting your knowledge of data science\n\n\n\n\nWhat these sessions are not meant for:\n\nSolving the assignments for you\nTaking care of developing your coding skills"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#class-etiquette",
    "href": "lectures/lecture-01/01-introduction.html#class-etiquette",
    "title": "Welcome to Data Science Computing!",
    "section": "Class etiquette",
    "text": "Class etiquette\n\n\n\nCoding can be tough and push you out of your comfort zone. If the course pace is too fast, let us know. I expect your commitment, but I do not want anyone to fail\nYou are all keen on data science, but your backgrounds vary. That is great! Some sessions might be more engaging than others. If you are bored, help others or explore new data science areas\nAlways be respectful to each other\nAsk questions whenever you need to!"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#an-old-classic",
    "href": "lectures/lecture-01/01-introduction.html#an-old-classic",
    "title": "Welcome to Data Science Computing!",
    "section": "An old classic",
    "text": "An old classic"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#an-old-classic-1",
    "href": "lectures/lecture-01/01-introduction.html#an-old-classic-1",
    "title": "Welcome to Data Science Computing!",
    "section": "An old classic",
    "text": "An old classic"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#an-old-classic-2",
    "href": "lectures/lecture-01/01-introduction.html#an-old-classic-2",
    "title": "Welcome to Data Science Computing!",
    "section": "An old classic",
    "text": "An old classic"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#an-old-classic-3",
    "href": "lectures/lecture-01/01-introduction.html#an-old-classic-3",
    "title": "Welcome to Data Science Computing!",
    "section": "An old classic",
    "text": "An old classic"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#an-old-classic-4",
    "href": "lectures/lecture-01/01-introduction.html#an-old-classic-4",
    "title": "Welcome to Data Science Computing!",
    "section": "An old classic",
    "text": "An old classic"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#our-focus",
    "href": "lectures/lecture-01/01-introduction.html#our-focus",
    "title": "Welcome to Data Science Computing!",
    "section": "Our focus!",
    "text": "Our focus!"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#rise-of-the-digital-information-age",
    "href": "lectures/lecture-01/01-introduction.html#rise-of-the-digital-information-age",
    "title": "Welcome to Data Science Computing!",
    "section": "Rise of the digital information age",
    "text": "Rise of the digital information age"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#social-media-data",
    "href": "lectures/lecture-01/01-introduction.html#social-media-data",
    "title": "Welcome to Data Science Computing!",
    "section": "Social media data",
    "text": "Social media data"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#new-data-formats",
    "href": "lectures/lecture-01/01-introduction.html#new-data-formats",
    "title": "Welcome to Data Science Computing!",
    "section": "New data formats",
    "text": "New data formats"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#survey-data",
    "href": "lectures/lecture-01/01-introduction.html#survey-data",
    "title": "Welcome to Data Science Computing!",
    "section": "Survey data",
    "text": "Survey data"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#cheap-computing-power",
    "href": "lectures/lecture-01/01-introduction.html#cheap-computing-power",
    "title": "Welcome to Data Science Computing!",
    "section": "Cheap computing power",
    "text": "Cheap computing power"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#scraping-the-web-for-social-research",
    "href": "lectures/lecture-01/01-introduction.html#scraping-the-web-for-social-research",
    "title": "Welcome to Data Science Computing!",
    "section": "Scraping the web for social research",
    "text": "Scraping the web for social research"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#tackling-social-problems",
    "href": "lectures/lecture-01/01-introduction.html#tackling-social-problems",
    "title": "Welcome to Data Science Computing!",
    "section": "Tackling social problems",
    "text": "Tackling social problems"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#reducing-hate-speech",
    "href": "lectures/lecture-01/01-introduction.html#reducing-hate-speech",
    "title": "Welcome to Data Science Computing!",
    "section": "Reducing hate speech",
    "text": "Reducing hate speech"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#monitoring-the-effects-of-climate-change-on-health",
    "href": "lectures/lecture-01/01-introduction.html#monitoring-the-effects-of-climate-change-on-health",
    "title": "Welcome to Data Science Computing!",
    "section": "Monitoring the effects of climate change on health",
    "text": "Monitoring the effects of climate change on health"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#calling-bullsht-when-you-see-it",
    "href": "lectures/lecture-01/01-introduction.html#calling-bullsht-when-you-see-it",
    "title": "Welcome to Data Science Computing!",
    "section": "Calling bullsh*t when you see it",
    "text": "Calling bullsh*t when you see it\n\n\n\n\n\n\n\nLearn not to be fooled by\n\nbig data\ngarbage data\ngarbage models\nweird samples\nclaims of generality\nimplausibly large effect sizes\noverfitted models\n\nAnd much more‚Ä¶"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#and-much-more",
    "href": "lectures/lecture-01/01-introduction.html#and-much-more",
    "title": "Welcome to Data Science Computing!",
    "section": "And much more‚Ä¶",
    "text": "And much more‚Ä¶\n\n\n\n\nAbundance of data available for research and for governments to make better decisions\n\nOpportunities for novel research questions\nNew methods to answer longstanding research questions\n\nNew technologies also have social implications and can raise important policy issues\n\nEthical concerns\nUse of technology by malicious actors\nGovernment use of technology to censor or monitor citizens"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#course-objectives",
    "href": "lectures/lecture-01/01-introduction.html#course-objectives",
    "title": "Welcome to Data Science Computing!",
    "section": "Course objectives",
    "text": "Course objectives\n\n\n\n\n\nUse data science tools for project collaboration and version control\nApply advanced techniques for data storage, manipulation, and querying\nCreate clear data visualisations and write well-documented code\nUse AI tools to help with programming tasks\nUnderstand the basics of containerisation and parallel computing"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#key-focus-areas",
    "href": "lectures/lecture-01/01-introduction.html#key-focus-areas",
    "title": "Welcome to Data Science Computing!",
    "section": "Key focus areas",
    "text": "Key focus areas\nWhy reliability, reproducibility, and robustness matter\n\nThis course centres around three key areas of the modern data science workflow: reliability, reproducibility, and robustness\n\n\n\n\n\n\nReliability:\n\nEnsures consistency in results across multiple runs\nMinimises errors in data processing and analysis\nSupports accurate interpretation of findings\n\n\n\n\n\n\n\n\nReproducibility:\n\nAllows others to verify and build upon your work\nEnhances the credibility of research outcomes\nFacilitates long-term preservation of scientific knowledge\n\n\n\n\n\n\n\n\nRobustness:\n\nEnables analyses to handle unexpected data variations\nImproves the stability of results under different conditions\nSupports the scalability of methods to larger datasets"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#key-tools",
    "href": "lectures/lecture-01/01-introduction.html#key-tools",
    "title": "Welcome to Data Science Computing!",
    "section": "Key tools",
    "text": "Key tools\n\nCommand line interfaces and vim for precise control"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#key-tools-1",
    "href": "lectures/lecture-01/01-introduction.html#key-tools-1",
    "title": "Welcome to Data Science Computing!",
    "section": "Key tools",
    "text": "Key tools\n\nGit and GitHub for version control, and GitHub Copilot for code generation"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#key-tools-2",
    "href": "lectures/lecture-01/01-introduction.html#key-tools-2",
    "title": "Welcome to Data Science Computing!",
    "section": "Key tools",
    "text": "Key tools\n\nSQL and Pandas for robust data manipulation"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#key-tools-3",
    "href": "lectures/lecture-01/01-introduction.html#key-tools-3",
    "title": "Welcome to Data Science Computing!",
    "section": "Key tools",
    "text": "Key tools\n\nMatplotlib, Seaborn, and plotnine (if you want to!) for flexible visualisation"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#key-tools-4",
    "href": "lectures/lecture-01/01-introduction.html#key-tools-4",
    "title": "Welcome to Data Science Computing!",
    "section": "Key tools",
    "text": "Key tools\n\nDocker for consistent computational environments\nDask for scalable and parallel computing"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#logistics",
    "href": "lectures/lecture-01/01-introduction.html#logistics",
    "title": "Welcome to Data Science Computing!",
    "section": "Logistics",
    "text": "Logistics\nCourse information\n\n\nSyllabus: Available on our course repository and website. The course is designed to be self-contained. The syllabus includes links to slides and Jupyter Notebooks we will use in class, along with recommended readings, and problem sets. I will upload slides throughout the term as we progress.\nSchedule: Lectures are on Mondays and Wednesdays from 2:30 to 3:45 pm\nOffice Hours: I‚Äôm available to meet you at any time. And I mean it. Please reach out a couple of days in advance and we can schedule a meeting\nMaterials:\n\nCourse repository: https://github.com/danilofreire/qtm350\nCanvas"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#assignments",
    "href": "lectures/lecture-01/01-introduction.html#assignments",
    "title": "Welcome to Data Science Computing!",
    "section": "Assignments",
    "text": "Assignments\nHow you will be graded\n\n\n\n\nProblem sets: Ten of them, due on Wednesdays at 11:59 pm (50%)\nIn-class quizzes: Five of them (30%)\nFinal project: Due on the last day of class (20%)\nLate policy: 10% off per day late\nCollaboration: You can discuss assignments with your classmates, but you must write your own code and submit your own work. AI is allowed.\nAcademic integrity: Please refer to the syllabus for the university‚Äôs policy on academic integrity"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#software",
    "href": "lectures/lecture-01/01-introduction.html#software",
    "title": "Welcome to Data Science Computing!",
    "section": "Software",
    "text": "Software\n\n\n\n\nGit: Version control system. Download it here. Instructions for installation here. Feel free to configure it if you wish (instructions here), but we are going to talk about it in class.\nGitHub: Online platform for hosting code repositories. You will use it a lot, and not only for this class. Create an account on GitHub and register for a student/educator discount.\nThere is a series of tutorials available on our course website on how to set up Git and GitHub: https://danilofreire.github.io/qtm350/tutorials/tutorials.html"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#os-extras",
    "href": "lectures/lecture-01/01-introduction.html#os-extras",
    "title": "Welcome to Data Science Computing!",
    "section": "OS extras",
    "text": "OS extras\n\n\n\n\nWindows: Please install Windows Subsystem for Linux (bash). Another good tutorial can be found here. FAQ available here.\n\nTip: VS Code is a great code editor for Windows and it already includes a terminal\n\nMac: None, but you can install iTerm2, Homebrew and Oh My Zsh for a better experience\nLinux: None, you should be good to go"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#other-tools",
    "href": "lectures/lecture-01/01-introduction.html#other-tools",
    "title": "Welcome to Data Science Computing!",
    "section": "Other tools",
    "text": "Other tools\n\n\n\n\nWe will have time to install other tools during the course. But if you want to get ahead, you can install the following:\nVS Code: Code editor. Download it here\nAnaconda: Python distribution. Download it here\nDocker: Containerisation tool. Download it here\nPostgreSQL: Database management system. Download it here\n\n\n\n\n\nTutorials for these tools are available on our course website: https://danilofreire.github.io/qtm350/tutorials/tutorials.html"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#next-class",
    "href": "lectures/lecture-01/01-introduction.html#next-class",
    "title": "Welcome to Data Science Computing!",
    "section": "Next class",
    "text": "Next class\n\n\nWe will cover computational literacy, including binary and hexadecimal numbers, and character encoding systems like ASCII and Unicode\nWe will also discuss the early days of computing, focusing on Konrad Zuse‚Äôs work with digital computers and binary arithmetic\nWe will talk about the evolution of programming languages, from assembly to modern high-level languages like Python, and the differences between compiled and interpreted languages\nThere will be time for questions about installing the terminal. You do not need it for next week, but consider installing it soon, as it will be necessary in two weeks. Please create a GitHub educational account if you do not have one üòâ\n\n\n‚Ä¶ and that‚Äôs all for today! üòä"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#course-information",
    "href": "lectures/lecture-02/02-computational-literacy.html#course-information",
    "title": "QTM 350 - Data Science Computing",
    "section": "Course information",
    "text": "Course information\n\n\n\n\n danilo.freire@emory.edu\n https://danilofreire.github.io/qtm350\n https://github.com/danilofreire/qtm350\n\n\n\nInstructor: Danilo Freire\nLectures: Mondays and Wednesdays, 2:30-3:45pm\nOffice hours: At any time, just send me an email in advance\nPlease remember to check the course repository regularly for updates and announcements üòâ"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#course-information-1",
    "href": "lectures/lecture-02/02-computational-literacy.html#course-information-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Course information",
    "text": "Course information\n\n\n\n\n\n\n\n\nThe course focuses on three key areas of data science: reliability, reproducibility, and robustness\nMain topics: command line and shell scripting (terminal), version control (git and GitHub), reproducible reports (Quarto and Jupyter Notebooks), data wrangling and storage (Python and SQL), data visualisation (Python), AI-paired programming (Copilot), introduction to containers (Docker), and parallel computing (Python)\n\n\n\n\n\nGrading:\n\n50% assignments (10x)\n30% in-class quizzes (5x)\n20% final project\n\n\n\n\n\n\nYou can discuss assignments with your classmates, but please submit your own work\nAI is allowed in all assignments and quizzes\nLate submissions will be penalised by 10% per day\nTo accommodate any challenges, I will drop the lowest assignment and quiz grades\nAdditional information will be made available on the course repository"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#software-installation",
    "href": "lectures/lecture-02/02-computational-literacy.html#software-installation",
    "title": "QTM 350 - Data Science Computing",
    "section": "Software installation",
    "text": "Software installation\n\n\n\n\n\n\n\nAs we discussed in the first lecture, you will need to install the following software:\nA terminal\n\nYou can install WSL if you are using Windows. Or you can use VS Code‚Äôs built-in terminal\nMac users already have a terminal. I suggest you install iTerm2, Homebrew and Oh My Zsh for a better experience\nLinux users are good to go\n\n\n\n\nGit\nGitHub\nAnaconda (or regular Python)\nQuarto\nPostgreSQL\nDocker\nVS Code (optional, but strongly recommended)\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nPlease check the installation tutorials for more information\nYou can also get help from the Student Tech Support\nIf you have any questions, please let me know!"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#learning-objectives",
    "href": "lectures/lecture-02/02-computational-literacy.html#learning-objectives",
    "title": "QTM 350 - Data Science Computing",
    "section": "Learning objectives",
    "text": "Learning objectives\nBy the end of this lecture, you will be able to:\n\n\n\n\nLearn how computers work from the ground up, starting with binary code\nGet familiar with other key computer encodings like hexadecimal, ASCII, and Unicode\nLearn about the pioneers of computing and the development of Assembly language\nUnderstand the difference between low-level and high-level programming languages and when to use each"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#the-first-computers",
    "href": "lectures/lecture-02/02-computational-literacy.html#the-first-computers",
    "title": "QTM 350 - Data Science Computing",
    "section": "The first computers",
    "text": "The first computers\n\n\n\n\n\n\nHistorically, a computer was a person who makes calculations, especially with a calculating machine\nTo do calculations we use numbers. How to represent them?\n\nFingers\nPebbles\nStrings (Inca Khipu)\nAbacus\n\n\n\n\n Video: How to use an abacus"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#four-species-mechanical-calculators",
    "href": "lectures/lecture-02/02-computational-literacy.html#four-species-mechanical-calculators",
    "title": "QTM 350 - Data Science Computing",
    "section": "Four-species mechanical calculators",
    "text": "Four-species mechanical calculators\n\n\n\n\n\n\n\n\nThe first mechanical calculator capable of performing all four basic arithmetic operations (addition, subtraction, multiplication, and division)\nInvented by Gottfried Wilhelm Leibniz in 1694\nIf you took a statistics course before the late 1970s, you likely used this type of mechanical calculator for your computations"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#silicon-based-computers",
    "href": "lectures/lecture-02/02-computational-literacy.html#silicon-based-computers",
    "title": "QTM 350 - Data Science Computing",
    "section": "Silicon-based computers",
    "text": "Silicon-based computers\n\n\n\n\n\n\n\n\nThe 1970s marked the transition from mechanical to electronic:\n\n\nTransistors act as switches for electronic signals\nIntegrated circuits combine multiple transistors on a single chip\nMicroprocessors are integrated circuits that contain the functions of a computer‚Äôs central processing unit (CPU)\nThey follow the Von Neumann architecture"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#von-neumann-architecture",
    "href": "lectures/lecture-02/02-computational-literacy.html#von-neumann-architecture",
    "title": "QTM 350 - Data Science Computing",
    "section": "Von Neumann Architecture",
    "text": "Von Neumann Architecture\n\n\n\n\n\n\n\n\n\nThe Von Neumann Architecture stores both program instructions and data together in a slow storage medium, such as a hard disk, and transfers them to faster RAM for execution by the CPU\nThis is the basis for almost all modern computers\nWhen proposed in 1945, this architecture was revolutionary, as programs were previously seen as part of the machine, distinct from the data they operated on"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#von-neumann-architecture-1",
    "href": "lectures/lecture-02/02-computational-literacy.html#von-neumann-architecture-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Von Neumann Architecture",
    "text": "Von Neumann Architecture\n\n\n\n\n\n\n\n\n\nAdvantages:\n\nEfficient memory use, with less need for separate areas\nFlexibility in data storage and manipulation\nSimplicity in design and operation\n\nDisadvantages:\n\nVon Neumann bottleneck: Limits computing performance due to sequential processing of instructions and data through a single bus\nThe CPU often waits for data due to its faster processing speed compared to memory transfer rates\nHarvard architecture is an alternative that separates data and instruction memory"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#computers-run-on-0s-and-1s",
    "href": "lectures/lecture-02/02-computational-literacy.html#computers-run-on-0s-and-1s",
    "title": "QTM 350 - Data Science Computing",
    "section": "Computers run on 0s and 1s",
    "text": "Computers run on 0s and 1s\n\n\n\n\n\n\n\nComputers represent everything by using 0s and 1s\nTransistors act as switches, with 1 for high voltage level and 0 for low voltage level\nComputers use binary because transistors are easy to fabricate in silicon and can be densely packed on a chip\n\n\n\nBut how does this work?\nHow can we represent text, images, and videos using only 0s and 1s?\nThis leads us to abstraction: representing ideas at different levels of detail by identifying what is essential\nWe will use abstraction to translate 0s and 1s to decimal numbers, then translate those numbers to other types"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#converting-coins-to-dollars",
    "href": "lectures/lecture-02/02-computational-literacy.html#converting-coins-to-dollars",
    "title": "QTM 350 - Data Science Computing",
    "section": "Converting coins to dollars",
    "text": "Converting coins to dollars\n\n\n\n\n\n\n\n\n\nWe can convert between number systems by translating a value from one system to the other\nFor example, the coins on the left represent the same value as $0.87\nUsing pictures is clunky. Let‚Äôs make a new representation system for coins"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#converting-coins-to-dollars-1",
    "href": "lectures/lecture-02/02-computational-literacy.html#converting-coins-to-dollars-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Converting coins to dollars",
    "text": "Converting coins to dollars\n\n\n\n\n\n\n\n\n\nTo represent coins, we will make a number with four digits\nThe first represents quarters, the second dimes, the third nickels, and the fourth pennies\n\nc3102 =\n3 x $0.25 + 1 x $0.10 + 0 x $0.05 + 2 x $0.01 =\n$0.87"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#converting-dollars-to-coins",
    "href": "lectures/lecture-02/02-computational-literacy.html#converting-dollars-to-coins",
    "title": "QTM 350 - Data Science Computing",
    "section": "Converting dollars to coins",
    "text": "Converting dollars to coins\n\n\n\n\n\n\n\n\n\nHow do we convert money from dollars to coins? Assume we want to minimise the number of coins used\nFor example, what is $0.59 in coin representation? Use the same four-digit system: quarters, dimes, nickels, and pennies\n$0.59 = 2 x $0.25 + 0 x $0.10 + 1 x $0.05 + 4 x $0.01 = c2014"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#quick-questions",
    "href": "lectures/lecture-02/02-computational-literacy.html#quick-questions",
    "title": "QTM 350 - Data Science Computing",
    "section": "Quick questions!",
    "text": "Quick questions!\n\n\n\n\n\n\nThink-Pair-Share: do the following conversions\nWhat is c1112 in dollars?\nWhat is $0.61 in coin representation?\n\n\n\n\nSolutions:\n\nc1112 = $0.42 = 1 x $0.25 + 1 x $0.10 + 1 x $0.05 + 2 x $0.01\n$0.61 = c2101 = 2 x $0.25 + 1 x $0.10 + 0 x $0.05 + 1 x $0.01"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#number-systems-binary",
    "href": "lectures/lecture-02/02-computational-literacy.html#number-systems-binary",
    "title": "QTM 350 - Data Science Computing",
    "section": "Number systems ‚Äì binary",
    "text": "Number systems ‚Äì binary\n\n\n\n\n\n\nNow let us go back to computers! üíª\nWe can represent numbers using only 0s and 1s with the binary number system\nInstead of counting the number of 1s, 5s, 10s, and 25s coins you need, count the number of 1s, 2s, 4s, 8s, etc\nWhy these numbers? They are powers of 2. This is a number in base 2\nA single binary digit is a bit, e.g., 101 has three bits\nAn 8-bit group is called a byte, e.g., 10101010\nBinary numbers grow as follows:\n\n0 represents zero\n1 represents one\n10 represents two\n100 represents four\n1000 represents eight, and so on‚Ä¶"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#quick-question",
    "href": "lectures/lecture-02/02-computational-literacy.html#quick-question",
    "title": "QTM 350 - Data Science Computing",
    "section": "Quick question!",
    "text": "Quick question!\n\n\n\n\nThink-Pair-Share: what is the binary representation of the decimal number 3?\n\n\n\n101\n\n\n\n\n\n11\n\n\n\n\n\n111\n\n\n\n\n010"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#your-turn",
    "href": "lectures/lecture-02/02-computational-literacy.html#your-turn",
    "title": "QTM 350 - Data Science Computing",
    "section": "Your turn!",
    "text": "Your turn!\nPractice Exercise 01:\n\nWhat binary number represents 5?\nWhat binary number represents 7?\nWhat binary number represents 9?\nWhat binary number represents 11?"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#convert-binary-to-decimal",
    "href": "lectures/lecture-02/02-computational-literacy.html#convert-binary-to-decimal",
    "title": "QTM 350 - Data Science Computing",
    "section": "Convert binary to decimal",
    "text": "Convert binary to decimal\n\n\n\nTo convert a binary number to decimal, just add each power of 2 that is represented by a 1.\n\n\nFor example, 00011000 = 16 + 8 = 24\n\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n0\n0\n0\n1\n1\n0\n0\n0\n\n\n\n\n\nAnother example: 10010001 = 128 + 16 + 1 = 145\n\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n1\n0\n0\n1\n0\n0\n0\n1"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#binary-and-abstraction-1",
    "href": "lectures/lecture-02/02-computational-literacy.html#binary-and-abstraction-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Binary and abstraction",
    "text": "Binary and abstraction\n\n\nNow that we can represent numbers using binary, we can represent everything computers store using binary\nWe just need to use abstraction to interpret bits or numbers in particular ways\nLet us consider colours, images, and text"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#images-as-collections-of-colours",
    "href": "lectures/lecture-02/02-computational-literacy.html#images-as-collections-of-colours",
    "title": "QTM 350 - Data Science Computing",
    "section": "Images as collections of colours",
    "text": "Images as collections of colours\n\n\n\n\n\n\n\n\n\n\nWhat if we want to represent an image? How can we convert that to numbers?\nFirst, break the image down into a grid of colours, where each dot of color has a distinct hue\nA dot of color in this context is called a pixel\nNow we just need to represent a single color (a pixel) as a number!"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#images-as-collections-of-colours-1",
    "href": "lectures/lecture-02/02-computational-literacy.html#images-as-collections-of-colours-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Images as collections of colours",
    "text": "Images as collections of colours\nRGB colour model\n\n\n\n\n\n\n\n\n\n\nThe RGB colour model is widely used in digital displays\nEach pixel is represented by three numbers, each ranging from 0 to 255\nThe first number represents the amount of red, the second the amount of green, and the third the amount of blue\n00000000 is no r/g/b and 11111111 is very r/g/b!\nYou can try different colours here"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#number-systems-hexadecimal",
    "href": "lectures/lecture-02/02-computational-literacy.html#number-systems-hexadecimal",
    "title": "QTM 350 - Data Science Computing",
    "section": "Number systems ‚Äì Hexadecimal",
    "text": "Number systems ‚Äì Hexadecimal\nWhat is hexadecimal?\n\n\n\n\n\n\n\n\n\n\nWhen we represent values with multiple bytes, it can be hard to distinguish where numbers begin and end\nHexadecimal is a number system with 16 digits: 0123456789ABCDEF\nIt is used to represent binary numbers in a more compact way\nEach hex digit corresponds to 4 binary bits, making it a shorthand for binary:\n\n0000 = 0\n0001 = 1\n0010 = 2\n‚Ä¶\n1110 = E\n1111 = F"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#binary-to-hex-conversion",
    "href": "lectures/lecture-02/02-computational-literacy.html#binary-to-hex-conversion",
    "title": "QTM 350 - Data Science Computing",
    "section": "Binary to hex conversion",
    "text": "Binary to hex conversion\n\n\n\n\nConvert binary to hex by grouping into blocks of four bits.\nExample: Binary 1001 1110 0000 1010 converts to Hex 9E0A.\n\n\n\nPractice Exercise 02:\n\nConvert the decimal number 13 to binary.\nConvert the decimal number 13 to hexadecimal."
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#hexadecimal-and-html",
    "href": "lectures/lecture-02/02-computational-literacy.html#hexadecimal-and-html",
    "title": "QTM 350 - Data Science Computing",
    "section": "Hexadecimal and HTML",
    "text": "Hexadecimal and HTML\nHex and RGB\n\n\nHTML uses hexadecimal to represent colours\nSix-digit hex numbers specify colours:\n\nFFFFFF = White\n000000 = Black\n\nEach pair of digits represents a colour component (RGB).\nEach color channel typically has a range from 0 to 255 (in 8-bit systems), which gives a total of 256 intensity levels for each primary color.\nWhen you combine the three channels, you get a possible color palette of \\(256^3\\) or about 16.7 million colours"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#represent-text-as-individual-characters",
    "href": "lectures/lecture-02/02-computational-literacy.html#represent-text-as-individual-characters",
    "title": "QTM 350 - Data Science Computing",
    "section": "Represent text as individual characters",
    "text": "Represent text as individual characters\nCharacters and glyphs\n\n\n\n\n\n\n\n\n\n\nNext, how do we represent text?\nFirst, we break it down into smaller parts, like with images. In this case, we can break text down into individual characters\nA character is the smallest component of text, like A, B, or /.\nA glyph is the graphical representation of a character.\nIn programming, the display of glyphs is typically handled by GUI (Graphical User Interface) toolkits or font renderers"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#represent-text-as-individual-characters-1",
    "href": "lectures/lecture-02/02-computational-literacy.html#represent-text-as-individual-characters-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Represent text as individual characters",
    "text": "Represent text as individual characters\nLookup tables\n\n\n\n\n\n\n\n\n\n\nFor example, the text ‚ÄúHello World‚Äù becomes H, e, l, l, o, space, W, o, r, l, d\nUnlike colours, characters do not have a logical connection to numbers\nTo represent characters as numbers, we use a lookup table called ASCII\nASCII stands for American Standard Code for Information Interchange\nAs long as every computer uses the same lookup table, computers can always translate a set of numbers into the same set of characters"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#ascii-is-nothing-but-a-simple-lookup-table",
    "href": "lectures/lecture-02/02-computational-literacy.html#ascii-is-nothing-but-a-simple-lookup-table",
    "title": "QTM 350 - Data Science Computing",
    "section": "ASCII is nothing but a simple lookup table",
    "text": "ASCII is nothing but a simple lookup table\nYes, really!\n\n\n\n\n\nFor basic characters, we can use the encoding system called ASCII. This maps the numbers 0 to 255 to characters. Therefore, one character is represented by one byte\nCheck it out here: ASCII Table"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#ascii-is-nothing-but-a-simple-lookup-table-1",
    "href": "lectures/lecture-02/02-computational-literacy.html#ascii-is-nothing-but-a-simple-lookup-table-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "ASCII is nothing but a simple lookup table",
    "text": "ASCII is nothing but a simple lookup table\nTranslation\n\n\n\n\n\n\n‚ÄúHello World‚Äù =\n01001000 01100101 01101100 01101100 01101111 00100000 01010111 01101111 01110010 01101100 01100100"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#your-turn-1",
    "href": "lectures/lecture-02/02-computational-literacy.html#your-turn-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Your turn!",
    "text": "Your turn!\nPractice Exercise 03\n\n\n\n\n\n\n\nTranslate the following binary into ASCII text:\n\n01011001 01100001 01111001"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#ascii-limitations",
    "href": "lectures/lecture-02/02-computational-literacy.html#ascii-limitations",
    "title": "QTM 350 - Data Science Computing",
    "section": "ASCII Limitations",
    "text": "ASCII Limitations\n\n\nASCII only includes unaccented characters.\nLanguages requiring accented characters cannot be represented.\nEven English needs characters like ‚Äò√©‚Äô for words such as ‚Äòcaf√©‚Äô.\n\n\n\nTo address this, Unicode was developed\nUnicode is a superset of ASCII that includes characters from all languages, as well as symbols and emojis\nThe Unicode system represents every character that can be typed into a computer. It uses up to 5 bytes, which can represent up to 1 trillion characters!\nUTF-8 stands for Transformation Format 8-bit\nFind all the Unicode characters here: https://symbl.cc/en/unicode-table/\n\n‚ÄúDanilo‚Äù in Unicode: \\u0044\\u0061\\u006e\\u0069\\u006c\\u006f\n‚ÄúQTM 350‚Äù in Unicode: \\u0051\\u0054\\u004d\\u0020\\u0033\\u0035\\u0030\n\nDecoder: https://symbl.cc/en/tools/decoder/"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#the-genesis-of-programming",
    "href": "lectures/lecture-02/02-computational-literacy.html#the-genesis-of-programming",
    "title": "QTM 350 - Data Science Computing",
    "section": "The genesis of programming",
    "text": "The genesis of programming\nZuse‚Äôs computers\n\n\n\n\n\n\n\n\n\nKonrad Zuse was a German engineer and computer pioneer\nHe created the first programmable computer, the Z3, in 1941\nThe Z3 was the first computer to use binary arithmetic and read binary instructions from punch tape\nExample: Z4 had 512 bytes of memory\nZuse also created the first high-level programming language, Plankalk√ºl"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#what-is-assembly-language",
    "href": "lectures/lecture-02/02-computational-literacy.html#what-is-assembly-language",
    "title": "QTM 350 - Data Science Computing",
    "section": "What is Assembly language?",
    "text": "What is Assembly language?\n\n\n\n\n\n\n\n\n\nAssembly language is a low-level programming language that allows writing machine code in human-readable text\nEach instruction corresponds to a single machine code instruction\nThe first assemblers were human!\nProgrammers wrote assembly code, which secretaries transcribed to binary for machine processing"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#some-curious-facts-about-assembly",
    "href": "lectures/lecture-02/02-computational-literacy.html#some-curious-facts-about-assembly",
    "title": "QTM 350 - Data Science Computing",
    "section": "Some curious facts about Assembly!",
    "text": "Some curious facts about Assembly!\n\n\n\n\n\n\n\n\nMargaret Hamilton and the Apollo 11 code\n\n\n\n\n\nThe Apollo 11 mission to the moon was programmed in assembly language\nThe code is available here: https://github.com/chrislgarry/Apollo-11 (good luck reading it! üòÖ)\nOne of the files is the BURN_BABY_BURN--MASTER_IGNITION_ROUTINE.agc üî• üöÄ\nBut if Assembly is so fast and efficient, why don‚Äôt we use it all the time?"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#low-level-vs-high-level-languages",
    "href": "lectures/lecture-02/02-computational-literacy.html#low-level-vs-high-level-languages",
    "title": "QTM 350 - Data Science Computing",
    "section": "Low-level vs high-level languages",
    "text": "Low-level vs high-level languages\n\n\n\n\n\n\n\nLow-level languages are closer to machine code and are harder to read and write\nHigh-level languages abstract from hardware details and are portable across different systems\n\n\n\n\n\nCompiled Languages: Convert code to binary instructions before execution (e.g., C++, Fortran, Go).\nInterpreted Languages: Run inside a program that interprets and executes commands immediately (e.g., R, Python)."
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#low-level-vs-high-level-languages-1",
    "href": "lectures/lecture-02/02-computational-literacy.html#low-level-vs-high-level-languages-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Low-level vs high-level languages",
    "text": "Low-level vs high-level languages\nCode that is worth a thousand words\n\n\n\n\n\n\n\n‚ÄúHello, World!‚Äù in machine code:\n\n\nR&gt; 48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 \n\n\n‚ÄúHello, World!‚Äù in Assembly (x86 Assembly for Linux)\n\n\nR&gt; section .data\n+     message db 'Hello, World!', 10    ; 10 is the ASCII code for newline\n+ \n+ section .text\n+     global _start\n+ \n+ _start:\n+     mov eax, 4          ; system call number for write\n+     mov ebx, 1          ; file descriptor 1 is stdout\n+     mov ecx, message    ; address of string to output\n+     mov edx, 14         ; number of bytes\n+     int 0x80            ; call kernel\n+ \n+     mov eax, 1          ; system call number for exit\n+     xor ebx, ebx        ; exit status 0\n+     int 0x80            ; call kernel\n\n\n\n\n\n‚ÄúHello, World!‚Äù in Python:\n\n\nR&gt; print(\"Hello, World!\")"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#summary-1",
    "href": "lectures/lecture-02/02-computational-literacy.html#summary-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\nComputational Literacy: Binary and hexadecimal numbers, characters (ASCII, Unicode), and distinction between high vs low-level programming languages\nEarly Computing: Konrad Zuse‚Äôs pioneering work with programmable digital computers and the use of binary arithmetic\nAssembly Language: The initial approach to programming using human-readable instructions for machine code\nCalculators: The evolution from Leibniz‚Äôs four-species calculating machine to modern electronic computing\nSilicon Microchip Computers: The 1970s revolution with transistors, integrated circuits, and the emergence of Von Neumann architecture\nModern Programming Languages: From low-level assembly languages to high-level languages like Python; distinction between compiled and interpreted languages"
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#next-class",
    "href": "lectures/lecture-02/02-computational-literacy.html#next-class",
    "title": "QTM 350 - Data Science Computing",
    "section": "Next class",
    "text": "Next class\n\n\n\n\n\n\nWe will learn about the command line and shell scripting in the terminal\nPlease have your WSL or iTerm2 installed, and we will start coding!\nIf you have VS Code, that‚Äôs even better! üòâ\nPlease check the installation tutorials for more information, and let me know if you have any questions üòÉ\n\n\n\n\n\nAssignment 01 is already online. Please check it out! Due date: 11 September 2024."
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#sec-solution01",
    "href": "lectures/lecture-02/02-computational-literacy.html#sec-solution01",
    "title": "QTM 350 - Data Science Computing",
    "section": "Solution - Practice Exercise 01",
    "text": "Solution - Practice Exercise 01\n\n\nWhat binary number represents 5?\n\n\nIn binary, the number 5 is represented as 101, which equates to \\((1 \\times 2^2) + (0 \\times 2^1) + (1 \\times 2^0)\\).\n\n\nWhat binary number represents 7?\n\n\nIn binary, the number 7 is represented as 111, which equates to \\((1 \\times 2^2) + (1 \\times 2^1) + (1 \\times 2^0)\\).\n\n\nWhat binary number represents 9?\n\n\nIn binary, the number 9 is represented as 1001, which equates to \\((1 \\times 2^3) + (0 \\times 2^2) + (0 \\times 2^1) + (1 \\times 2^0)\\).\n\n\nWhat binary number represents 11?\n\n\nIn binary, the number 11 is represented as 1011, which equates to \\((1 \\times 2^3) + (0 \\times 2^2) + (1 \\times 2^1) + (1 \\times 2^0)\\)."
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#sec-solution02",
    "href": "lectures/lecture-02/02-computational-literacy.html#sec-solution02",
    "title": "QTM 350 - Data Science Computing",
    "section": "Solution - Practice Exercise 02",
    "text": "Solution - Practice Exercise 02\n\n\nDecimal 13 is 1101 in binary.\n\n\nBreak it down: \\(13 = (1 \\times 2^3) + (1 \\times 2^2) + (0 \\times 2^1) + (1 \\times 2^0)\\).\n\n\nBinary 1101 is D in hexadecimal.\n\n\nGroup the binary into blocks of four: 1101.\nConvert each block to hex: 1101 (binary) = D (hex).\nLet‚Äôs take a closer look at how to convert the binary number 1101 to hexadecimal:\nStart with the binary number: 1101\nConvert it to decimal by summing the powers of 2:\n\n\\(1 \\times 2^3\\) = 8\n\\(1 \\times 2^2\\) = 4\n\\(0 \\times 2^1\\) = 0\n\\(1 \\times 2^0\\) = 1\n\nAdd the decimal values: \\(8 + 4 + 0 + 1 = 13\\)\nThe decimal number 13 corresponds to the hexadecimal number D.\nTherefore, binary 1101 is D in hexadecimal."
  },
  {
    "objectID": "lectures/lecture-02/02-computational-literacy.html#sec-solution03",
    "href": "lectures/lecture-02/02-computational-literacy.html#sec-solution03",
    "title": "QTM 350 - Data Science Computing",
    "section": "Solution - Practice Exercise 03",
    "text": "Solution - Practice Exercise 03\n\n\nStep 1: Identify the binary strings: 01011001 01100001 01111001\nStep 2: Convert each binary string to its decimal equivalent\n\n01011001 = 89\n01100001 = 97\n01111001 = 121\n\nStep 3: Map each decimal value to its corresponding ASCII character\n\n89 = Y\n97 = a\n121 = y\n\nStep 4: Combine the ASCII characters to form the final text\n\nResult: Yay\n\n\n\n\n\n\nComp. Literacy"
  },
  {
    "objectID": "lectures/lecture-03/LICENSE.html",
    "href": "lectures/lecture-03/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "QTM 350 - Data Science Computing",
    "section": "",
    "text": "Welcome to QTM 350! This course introduces key tools in modern data science, focusing on three essential aspects: reliability, reproducibility, and robustness. We will cover command line interfaces and vim, version control with Git and GitHub, and literate programming using Quarto and Jupyter Notebooks. You will also learn about data storage and manipulation with SQL and Pandas, and parallel computing with Dask. We will explore artificial intelligence-assisted programming with GitHub Copilot and finish with Docker and containerisation.\nBy working with real-world datasets and problems, students will gain hands-on experience using these tools and methods to extract insights from data. This course will develop technical skills and critical thinking needed to solve complex data challenges. Upon completion, students will be prepared to apply these tools to their own research and professional work."
  },
  {
    "objectID": "syllabus.html#suggested-books",
    "href": "syllabus.html#suggested-books",
    "title": "QTM 350 - Data Science Computing",
    "section": "Suggested Books",
    "text": "Suggested Books\n\nPython for Data Analysis by Wes McKinney\nElements of Data Science by Allen Downey\nSQL for Data Scientists by Renee M. P. Teate\nData Science on the Command Line by Jeroen Janssens\nDocker for Data Science by Joshua Cook\nPro Git by Scott Chacon and Ben Straub\nFree programming books\n\n\nOnline Courses\n\nCoursera: Python for Everybody Specialisation\nedX: Python Basics for Data Science\nCodecademy: Learn Python\nDataCamp: Introduction to SQL\nCoursera: SQL for Data Science\nCoursera: Introduction to Git and GitHub\nMicrosoft Learn: GitHub Copilot Fundamentals\n\n\n\nDocumentation\n\nOfficial Python Documentation\nNumPy Documentation\nPandas Documentation\nMatplotlib Documentation\nPostgreSQL Documentation\nGit Documentation\nGitHub Documentation\nDask Documentation\nGitHub Co-Pilot Documentation\nDocker Documentation"
  },
  {
    "objectID": "syllabus.html#module-01-introduction-to-python-jupyter-and-github",
    "href": "syllabus.html#module-01-introduction-to-python-jupyter-and-github",
    "title": "QTM 350 - Data Science Computing",
    "section": "Module 01: Introduction to Python, Jupyter, and GitHub",
    "text": "Module 01: Introduction to Python, Jupyter, and GitHub\n\nWednesday, August 28:\n\nSyllabus and course repository: https://github.com/danilofreire/qtm350.\nLecture 01: Welcome to QTM 350 - Introduction.\nCourse Tutorials: How to Install Anaconda, Jupyter, PostgreSQL, VSCode, and Open a Free Educational Account on GitHub.\n\nSuggested references:\n\nCleveland, W. S. (2001). Data science: An action plan for expanding the technical areas of the field of statistics. International Statistical Review, 69(1), 21-26.\nDonoho, D. (2017). 50 Years of Data Science. Journal of Computational and Graphical Statistics, 26(4), 745-766.\nBreiman, L. (2001). Statistical Modeling: The Two Cultures (with Comments and a Rejoinder by the Author). Statistical Science, 16(3), 199-231.\nBrady, H. E. (2019). The Challenge of Big Data and Data Science. Annual Review of Political Science, 22(1), 297-323.\nZitnik, M., Nguyen, F., Wang, B., Leskovec, J., Goldenberg, A., & Hoffman, M. M. (2019). Machine Learning for Integrating Data in Biology and Medicine: Principles, Practice, and Opportunities. Information Fusion, 50, 71-91.\n\n\n\nMonday, September 02: Labour Day (no class)\n\n\nWednesday, September 04:\n\nLecture 02: Computational Literacy.\nAssignment 01: Problem Set 01\n\nSuggested references:\n\nCampbell-Kelly, M., Aspray, W. F., Yost, J. R., Tinn, H., & D√≠az, G. C. (2023). Computer: A History of the Information Machine. Routledge.\nShalf, J. (2020). The Future of Computing beyond Moore‚Äôs Law. Philosophical Transactions of the Royal Society A, 378(2166), 20190061.\nAl-Hashimi, H. M. (2023). Turing, von Neumann, and The Computational Architecture of Biological Machines. Proceedings of the National Academy of Sciences, 120(25), e2220022120.\nWing, J. M. (2006). Computational Thinking. Communications of the ACM, 49(3), 33-35.\nVideos: David J. Malan - Abstraction, Khan Academy - Hexadecimal Number System, Matthias Wandel - Marble Adding Machine, Crash Course - Early Computing and Electronic Computing (the last two are quite entertaining!)."
  },
  {
    "objectID": "syllabus.html#module-02-introduction-to-the-command-line-interface-and-version-control",
    "href": "syllabus.html#module-02-introduction-to-the-command-line-interface-and-version-control",
    "title": "QTM 350 - Data Science Computing",
    "section": "Module 02: Introduction to the Command Line Interface and Version Control",
    "text": "Module 02: Introduction to the Command Line Interface and Version Control\n\nMonday September 09:\n\nLecture 03: The Command Line Interface (CLI), Shell Basics, and File Management.\n\nSuggested references:\n\nJanssens, J. (2021). Data Science at the Command Line: Obtain, Scrub, Explore, and Model Data with Unix Power Tools (2nd ed.). O‚ÄôReilly Media.\nLevy, J. (2024). The Art of Command Line. GitHub.\nShotts, W. (2019). The Linux Command Line: A Complete Introduction. No Starch Press.\nHealy, K. (2019). The Plain Person‚Äôs Guide to Plain Text Social Science. Chapters 1-5.\n\n\n\nWednesday, September 11:\n\nLecture 04: Command line tools, text files, scripting, and basics of Vim.\nAssignment 01 due (5%).\nAssignment 02: Problem Set 02.\n\nSuggested references:\n\nKerr, D. (2024). Effective Shell.\nIrianto, I. (2021). Learn Vim (the Smart Way).\nNeil, D. (2015). Practical Vim: Edit Text at the Speed of Thought. Pragmatic Bookshelf.\nVideos: freeCodeCamp - Command line crash course, Percy Grunwald - Absolute beginner guide to the macOS terminal, NetworkChuck - 50 macOS tips and tricks using terminal\n\n\n\nMonday, September 16:\n\nLecture 05: Version control with git and GitHub.\n\nSuggested references:\n\nChacon, S. and Straub, B. (2014). Pro Git. Apress. (Instructor‚Äôs note: this is the book on Git).\nGitHub tutorials: GitHub skills (recommended), Git guides, GitHub learning lab, Best practices for repositories.\n\n\n\nWednesday, September 18:\n\nLecture 06: More GitHub: pull requests, issues, pages, and collaboration features.\nAssignment 02 due (5%).\nAssignment 03: Problem Set 03.\n\nSuggested references:\n\nPerez-Riverol, Y., Gatto, L., Wang, R., Sachsenberg, T., Uszkoreit, J., Leprevost, F. da V., Fufezan, C., Ternent, T., Eglen, S. J., Katz, D. S., Pollard, T. J., Konovalov, A., Flight, R. M., Blin, K., & Vizca√≠no, J. A. (2016). Ten Simple Rules for Taking Advantage of Git and GitHub. PLOS Computational Biology, 12(7), e1004947.\nBeckman, M. D., √áetinkaya-Rundel, M., Horton, N. J., Rundel, C. W., Sullivan, A. J., & Tackett, M. (2021). Implementing version control with git and GitHub as a learning objective in statistics and data science courses. Journal of Statistics and Data Science Education, 29(sup1), S132-S144.\nEscamilla, E., Klein, M., Cooper, T., Rampin, V., Weigle, M. C., & Nelson, M. L. (2022). The Rise of GitHub in Scholarly Publications. arXiv preprint arXiv:2208.04895.\n\n\n\nMonday, September 23:\n\nLecture 07: Quiz 01: git and Github (6%)."
  },
  {
    "objectID": "syllabus.html#module-03-literate-programming-with-markdown-quarto-and-jupyter",
    "href": "syllabus.html#module-03-literate-programming-with-markdown-quarto-and-jupyter",
    "title": "QTM 350 - Data Science Computing",
    "section": "Module 03: Literate Programming with Markdown, Quarto, and Jupyter",
    "text": "Module 03: Literate Programming with Markdown, Quarto, and Jupyter\n\nWednesday, September 25:\n\nLecture 08: Using Markdown, Jupyter, and Quarto for Reproducible Reports.\nAssignment 03 due (5%).\nAssignment 04: Problem Set 04.\n\nSuggested references:\n\nQuarto official website.\nAwesome Quarto: https://github.com/mcanouil/awesome-quarto. Note: this repository contains dozens of tutorials, examples, and resources.\n√áetinkaya-Rundel, M. & Lowndes, J. S. (2022) Keynote talk: Hello Quarto: Share ‚Ä¢ Collaborate ‚Ä¢ Teach ‚Ä¢ Reimagine. Slides and source code. This is one of the nicest Quarto presentations I have seen.\nGetting Started with Quarto (YouTube). Note: Posit (formerly RStudio) has a series of tutorials on Quarto on their YouTube channel. You can find their playlist here.\nMarkdown Guide.\nJupyter Notebooks Documentation.\nCodecademy - How to use Jupyter Notebooks\nCourse tutorial: Jupyter and Markdown\n\n\n\nMonday, September 30:\n\nLecture 09: Presentations with Quarto and GitHub Pages.\n\nSuggested references:\n\nQuarto Documentation - Presentations and Websites.\nGitHub Pages Documentation.\nFrench, J. (2023). Creating Websites with Quarto and GitHub Pages (YouTube Playlist).\nTaylor, I. (2022). Publishing a Quarto Site to GitHub Pages\n\n\n\nWednesday, October 02:\n\nLecture 10: Quiz 02: Literate Programming (6%).\nAssignment 05: Problem Set 05.\nAssignment 04 due (5%)."
  },
  {
    "objectID": "syllabus.html#module-04-ai-assisted-programming",
    "href": "syllabus.html#module-04-ai-assisted-programming",
    "title": "QTM 350 - Data Science Computing",
    "section": "Module 04: AI-Assisted Programming",
    "text": "Module 04: AI-Assisted Programming\n\nMonday, October 07:\n\nLecture 11: Introduction to AI-Assisted Programming and Chatbots.\n\nSuggested references:\n\nCihon, P. & Demirer, M. (2023). How AI-powered software development may affect labor markets. Brookings Institution\nPoldrack, R. A., Lu, T., & Begu≈°, G. (2023). AI-assisted Coding: Experiments with GPT-4. arXiv preprint arXiv:2304.13187.\nLau, S & Guo, P. (2023). From ‚ÄúBan It Till We Understand It‚Äù to ‚ÄúResistance is Futile‚Äù: How University Programming Instructors Plan to Adapt as More Students Use AI Code Generation and Explanation Tools such as ChatGPT and GitHub Copilot. In Proceedings of the 2023 ACM Conference on International Computing Education Research V.1 (ICER ‚Äô23 V1), August 07‚Äì11, 2023, Chicago, IL, USA. ACM, New York, NY, USA 16 Pages.\nLinus Torvalds Discusses the Impact of AI on Programming (YouTube).\n\n\n\nWednesday, October 09:\n\nLecture 12: AI-Assisted Programming with GitHub Copilot.\nAssignment 05 due (5%).\nAssignment 06: Problem Set 06.\n\nSuggested references:\n\nGitHub Copilot Documentation.\nUsing GitHub Copilot in your IDE: Tips, Tricks, and Best Practices\nUsing GitHub Copilot in the Command Line\nCoding with an AI Pair Programmer: Getting Started with GitHub Copilot (YouTube)\nGitHub Copilot YouTube Playlist\nLabadze, L., Grigolia, M., & Machaidze, L. (2023). Role of AI Chatbots in Education: Systematic Literature Review. International Journal of Educational Technology in Higher Education, 20(1), 56. ## Module 05: Data Manipulation with Python\n\n\n\nMonday, October 14: Fall Break (no class)\n\n\nWednesday, October 16:\n\nLecture 13: Python Data Types, Boolean Logic, and Control Structures.\nAssignment 06 due (5%).\nAssignment 07: Problem Set 07.\n\nSuggested references:\n\nPython Documentation: An Informal Introduction to Python.\nPython Documentation: More Control Flow Tools.\nPython Documentation: Compound Statements.\nNumPy Documentation: Quickstart Tutorial.\nProgramiz: Math Operations in Python.\nMatthes, E. (2019). Python Crash Course: A Hands-On, Project-Based Introduction to Programming (2nd ed.). No Starch Press. Chapter 02.\nSeverance, C. (2016). Python for Everybody: Exploring Data in Python 3. CreateSpace Independent Publishing Platform. Chapters 3-11 (Note: Read only the chapters which interest you).\n\n\n\nMonday, October 21:\n\nLecture 14: Pandas for Data Analysis: Loading, Cleaning, and Exploring Data.\n\n\n\nWednesday, October 23:\n\nLecture 15: Pandas for Data Analysis: Data Wrangling and Aggregating.\nAssignment 07 due (5%).\nAssignment 08: Problem Set 08.\n\nSuggested references:\n\nMcKinney, W. (2022). Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython (3rd ed.). O‚ÄôReilly Media. Chapter 05: Getting Started with Pandas.\nVanderPlas, J. (2016). Python Data Science Handbook: Essential Tools for Working with Data. O‚ÄôReilly Media. Chapter 3: Data Manipulation with Pandas.\nMcKinney, W. (2022). Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython (3rd ed.). O‚ÄôReilly Media. Chapter 07: Data Cleaning and Preparation.\nDataCamp: Pandas Tutorial: DataFrames in Python.\nReal Python: Pandas Tutorial: DataFrames in Python.\n\n\n\nMonday, October 28:\n\nLecture 16: Quiz 03: Python for Data Analysis (6%)."
  },
  {
    "objectID": "syllabus.html#module-06-introduction-to-sql-databases",
    "href": "syllabus.html#module-06-introduction-to-sql-databases",
    "title": "QTM 350 - Data Science Computing",
    "section": "Module 06: Introduction to SQL Databases",
    "text": "Module 06: Introduction to SQL Databases\n\nWednesday, October 30:\n\nLecture 17: Introduction to PostgreSQL: Data Types, Tables, and Queries.\nAssignment 08 due (5%).\nAssignment 09: Problem Set 09.\nInstructions for the Final Project.\n\nSuggested references:\n\nMode Analytics: SQL Tutorial.\nReal Python: SQL Databases and SQLite.\nKhan Academy: SQL Basics. (Note: Khan Academy is a great resource for learning SQL and other programming languages).\nCoursera: PostgreSQL for Everybody.\nPostgreSQL Tutorial.\nPostgreSQL Documentation: SQL Commands. (Note: For reference only).\n\n\n\nMonday, November 04:\n\nLecture 18: Importing SQL Data into Python.\n\n\n\nWednesday, November 06:\n\nLecture 19: Merging Tables in SQL.\nAssignment 09 due (5%).\nAssignment 10: Problem Set 10.\n\nSuggested references:\n\nPandas Documentation: SQL Databases.\nReal Python: Working with SQLite Databases Using Python and Pandas.\nMode Analytics: SQL Joins.\nPostgreSQL Documentation: Joins Between Tables.\n\n\n\nMonday, November 11:\n\nLecture 20: Quiz 04: SQL Databases (6%)."
  },
  {
    "objectID": "syllabus.html#module-07-parallel-computing",
    "href": "syllabus.html#module-07-parallel-computing",
    "title": "QTM 350 - Data Science Computing",
    "section": "Module 07: Parallel Computing",
    "text": "Module 07: Parallel Computing\n\nWednesday, November 13:\n\nLecture 21: Parallel Computing with Dask.\nAssignment 10 due (5%).\n\nSuggested references:\n\nDask Documentation\nDask Tutorial\nCoiled - Intro to Dask Tutorial (YouTube).\nRocklin, M. (2017). Dask: Flexible Library for Parallel Computing in Python. In Proceedings of the 16th Python in Science Conference (Vol. 126, p.¬†130).\n\n\n\nMonday, November 18:\n\nLecture 22: Application: Parallelising Data Analysis with Dask and AutoML.\n\nSuggested references:\n\nDask Documentation: Machine Learning.\nHe, X., Zhao, K., & Chu, X. (2021). AutoML: A Survey of the State-of-The-Art. Knowledge-based systems, 212, 106622.\nTPOT Documentation."
  },
  {
    "objectID": "syllabus.html#module-08-containers-and-reproducibility",
    "href": "syllabus.html#module-08-containers-and-reproducibility",
    "title": "QTM 350 - Data Science Computing",
    "section": "Module 08: Containers and Reproducibility",
    "text": "Module 08: Containers and Reproducibility\n\nWednesday, November 20:\n\nLecture 23: Dependency Management, Virtual Environments, and Containers.\n\nSuggested references:\n\nDocker Documentation\n\n\n\nMonday, November 25:\n\nLecture 24: Docker for Data Science.\n\n\n\nWednesday, November 27: Thanksgiving Break (no class)\n\n\nMonday, December 02:\n\nLecture 25: Quiz 05: Dask, Docker and Containers (6%).\n\n\n\nWednesday, December 04:\n\nLecture 26: Review and Final Project Discussion.\n\n\n\nMonday, December 09:\n\nFinal Project due (20%)."
  },
  {
    "objectID": "tutorials/tutorials.html",
    "href": "tutorials/tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Below you will find a list of available tutorials with instructions on how to install and use the tools we will be using in class."
  },
  {
    "objectID": "tutorials/tutorials.html#available-tutorials",
    "href": "tutorials/tutorials.html#available-tutorials",
    "title": "Tutorials",
    "section": "Available Tutorials",
    "text": "Available Tutorials\n\n01 - VSCode and Anaconda Tutorial\n02 - Jupyter Notebook and Markdown Tutorial\n03 - GitHub Tutorial\n04 - PostgreSQL Tutorial\n\nPDF versions of the tutorials are also available on GitHub: https://github.com/danilofreire/qtm350/tree/main/tutorials."
  },
  {
    "objectID": "tutorials/tutorials.html#additional-resources",
    "href": "tutorials/tutorials.html#additional-resources",
    "title": "Tutorials",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nFurther examples\n\npython-postgresql-example.ipynb: A Jupyter Notebook with a PostgreSQL example\ntesting-ipython.ipynb: A Jupyter Notebook for showing Markdown and code cells\ntesting-anaconda.py: A Python script for testing Anaconda installation\n\n\n\nSuggested Books\n\nPython for Data Analysis by Wes McKinney\nElements of Data Science by Allen Downey\nSQL for Data Scientists by Renee M. P. Teate\nData Science on the Command Line by Jeroen Janssens\nDocker for Data Science by Joshua Cook\nPro Git by Scott Chacon and Ben Straub\nFree programming books\n\n\n\nOnline Courses\n\nCoursera: Python for Everybody Specialisation\nedX: Python Basics for Data Science\nCodecademy: Learn Python\nDataCamp: Introduction to SQL\nCoursera: SQL for Data Science\nCoursera: Introduction to Git and GitHub\nMicrosoft Learn: GitHub Copilot Fundamentals\n\n\n\nDocumentation\n\nOfficial Python Documentation\nNumPy Documentation\nPandas Documentation\nMatplotlib Documentation\nPostgreSQL Documentation\nGit Documentation\nGitHub Documentation\nDask Documentation\nGitHub Co-Pilot Documentation\nDocker Documentation\n\nFor any questions or issues regarding these tutorials, please open a GitHub issue, submit a pull request, or create a discussion post.\nPlease do not forget that, in addition to the tutorials here, the course syllabus also contains a list of recommended weekly readings and additional resources.\nI hope you like the tutorials and find them useful!"
  },
  {
    "objectID": "tutorials/03-github-tutorial.html",
    "href": "tutorials/03-github-tutorial.html",
    "title": "GitHub Tutorial",
    "section": "",
    "text": "This tutorial will guide you through the process of creating a GitHub educational account, downloading and installing GitHub Desktop, and downloading the course materials from GitHub to your computer. The tutorial also covers the basics of Git and GitHub, such as creating a repository, committing changes, and pushing changes to GitHub. It will also show you how to use VS Code to edit and manage your code on GitHub. You can use any tool you prefer to version control your code."
  },
  {
    "objectID": "tutorials/03-github-tutorial.html#footnotes",
    "href": "tutorials/03-github-tutorial.html#footnotes",
    "title": "GitHub Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAs a curiosity, the code for the Apollo 11 mission is also available on GitHub.‚Ü©Ô∏é\nThe default branch in GitHub is called main. This is the branch where you will make most of your changes. You can create other branches if you want to work on different features or bug fixes.‚Ü©Ô∏é"
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html",
    "href": "tutorials/02-jupyter-markdown-tutorial.html",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "",
    "text": "This tutorial will introduce you to Jupyter Notebook and Markdown. Jupyter Notebook is an interactive computing platform that allows users to create and share documents that contain live code, equations, visualisations, and narrative text. Markdown is a lightweight markup language that is used to format text, and can be used for everything - websites, documents, notes, books, presentations, email messages, and technical documentation. Even WhatsApp and Facebook Messenger use Markdown to format messages. So if you have already italicised a word or made a text bold on WhatsApp, you have used Markdown!\nThis tutorial is divided into two parts. The first part will introduce you to Jupyter Notebook and show you how to create a new notebook, run code cells, and format text cells using Markdown. The second part will provide a more in-depth look at Markdown and show you how to create headings, lists, links, images, and tables."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#what-is-jupyter-notebook",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#what-is-jupyter-notebook",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "What is Jupyter Notebook?",
    "text": "What is Jupyter Notebook?\nJupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. Jupyter Notebook supports over 40 programming languages, including Python, R, and Julia. Jupyter Notebook is widely used in data science, machine learning, scientific computing, and other fields.\nJupyter Notebooks provide an interactive development environment that allows you to write and execute code, see the results immediately, and create reproducible analyses. Jupyter Notebooks are organized into cells, which can contain code, text, equations, or visualisations. You can run individual cells or the entire notebook, and you can save your work as a notebook file (.ipynb) that can be shared with others."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#creating-a-new-notebook",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#creating-a-new-notebook",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Creating a New Notebook",
    "text": "Creating a New Notebook\nFirst, please make sure you have Python, Jupyter Notebook, and VSCode installed on your computer. If you do not have these installed, please refer to the VSCode and Anaconda Tutorial for instructions on how to install them.\nTo create a new Jupyter Notebook in VSCode, please go to the tab ‚ÄúFile‚Äù &gt; ‚ÄúNew File‚Äù. You will see a prompt in the middle of the screen. Select the option ‚ÄúJupyter Notebook‚Äù.\n\n\n\nCreating a new Jupyter Notebook in VSCode.\n\n\nA new Jupyter Notebook will be created with the file extension .ipynb. You can rename the notebook by clicking on the notebook name at the top of the screen. An empty notebook will look like this:\n\n\n\nAn empty Jupyter Notebook.\n\n\nPlease do not forget to select the Python interpreter that you want to use for the notebook. You can do this by clicking on the Python version at the top right corner of the screen. A prompt will appear, and you can select the Python interpreter that you want to use (in this case, Anacoda‚Äôs ‚Äúbase‚Äù).\n\n\n\nSelecting the Python interpreter for the notebook.\n\n\nTo create a chunk of Python code click on ‚Äú+ Code.‚Äù You will get an empty gray box which has Python on the lower-right corner. You can type Python code in this box and run it by clicking on the ‚ÄúRun‚Äù button on the left side of the box. You can also run the code by pressing ‚ÄúShift + Enter‚Äù on your keyboard.\n\n\n\nA code cell in a Jupyter Notebook.\n\n\nHere you should enter the Python commands. For example, type the following lines of code in the code cell:\n\nprint(\"Welcome to QTM 350!\")\n\nx = 5\ny = 10\nz = x + y\nprint(z)\n\nThe results of the code will be displayed below the code cell. In this case, the output will be:\n\n\n\nOutput of the code cell.\n\n\nTo create a text cell click on ‚Äú+ Markdown.‚Äù You will get an empty white box where you can type text. We will cover Markdown in more detail in the next section. But for now, you can type the following text in the Markdown cell:\n# Welcome to QTM 350!\n\nThis is a Jupyter Notebook. You can write *text*, **equations**, and `code` \nin [this notebook](https://github.com/danilofreire/qtm350/blob/main/tutorials/testing-ipython.ipynb). \nThe text will be displayed in the text cell like this:\n\n\n\nA text cell in a Jupyter Notebook.\n\n\nYou can run the text cell by clicking the ‚ÄúRun‚Äù button on the left side of the box or by pressing ‚ÄúShift + Enter‚Äù on your keyboard. The first text block shows how the text looks before running the cell, and the second block shows how it looks after running the cell. Just double click on the space where the text is to edit the Markdown block. This is should open the gray box again."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#why-use-markdown",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#why-use-markdown",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Why Use Markdown?",
    "text": "Why Use Markdown?\nMarkdown is a great way to format text because it is simple, easy to learn, and widely supported. You can use Markdown to create headings, lists, tables, equations, and figures in your documents. Markdown is used in many different applications, including Jupyter Notebook, GitHub, and Slack. Learning Markdown will help you create well-formatted documents that are easy to read and share."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#headings",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#headings",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Headings",
    "text": "Headings\nYou can create headings using the # symbol. For example, # Heading 1 creates a first-level heading, ## Heading 2 creates a second-level heading, and so on. You can create up to six levels of headings using the # symbol.\n# Heading 1\n## Heading 2\n### Heading 3"
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#lists",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#lists",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Lists",
    "text": "Lists\nTo create an ordered list with nested unordered sub-items in Markdown, you can write the following code:\n1. This is an ordered list.\n2. This is the second item in the ordered list.\n  - This is a sub-item in the unordered list.\n    - This is a sub-sub-item in the unordered list.\n\nThis is an ordered list.\nThis is the second item in the ordered list.\n\nThis is a sub-item in the unordered list.\n\nThis is a sub-sub-item in the unordered list.\n\n\n\nYou can also create unordered lists:\n- This is an unordered list.\n- This is the second item in the unordered list.\n  - This is a sub-item in the unordered list.\n\nThis is an unordered list.\nThis is the second item in the unordered list.\n\nThis is a sub-item in the unordered list."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#tables",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#tables",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Tables",
    "text": "Tables\nYou can create tables using the | symbol. For example:\nTable: Your Caption \n\n| A            | New              | Table          |\n|:-------------|:----------------:|---------------:|\n|left-aligned  |centre-aligned    |right-aligned   |\n|*italics*     |~~strikethrough~~ |**boldface**    |\n\nYour Caption\n\n\nA\nNew\nTable\n\n\n\n\nleft-aligned\ncentre-aligned\nright-aligned\n\n\nitalics\nstrikethrough\nboldface\n\n\n\nThe : symbols in the second row of the table determine the alignment of the text in each column. You can use left, center, or right to align the text."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#creating-markdown-tables-from-pandas-dataframes-in-jupyter-notebooks",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#creating-markdown-tables-from-pandas-dataframes-in-jupyter-notebooks",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Creating Markdown Tables from Pandas DataFrames in Jupyter Notebooks",
    "text": "Creating Markdown Tables from Pandas DataFrames in Jupyter Notebooks\nWhen working with pandas DataFrames, you can convert them into Markdown tables for better presentation. The method is also relatively simple. Here is how to do it:\n\nPrerequisites\nEnsure you have the following installed:\n\nJupyter Notebook\npandas\ntabulate (for enhanced table formatting)\n\nJupyter Notebook and pandas are included in the Anaconda distribution. You can install tabulate using conda install in your terminal. If you are using VS Code, you can open a terminal by clicking on ‚ÄúTerminal‚Äù &gt; ‚ÄúNew Terminal‚Äù in the top menu. Then run the following command:\nconda install tabulate\n\n\nBasic Method: Using pandas.DataFrame.to_markdown()\npandas provides a built-in method to_markdown() for converting DataFrames to Markdown tables.\n\nStep 1: Import pandas and create a DataFrame\nYou can create a dataframe by passing a dictionary to the pd.DataFrame() constructor:\n\n# If necessary, install pandas and tabulate \n# You should have pandas installed if you installed Anaconda, \n# but if you do not, you can install both with the following terminal command:\n# conda install pandas tabulate\n\n# Import pandas\nimport pandas as pd\nfrom tabulate import tabulate\n\n# Create a sample DataFrame\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"London\", \"Paris\"]\n}\ndf = pd.DataFrame(data)\n\n\n\nStep 2: Convert DataFrame to Markdown\nThen you just need to call the to_markdown() method on the DataFrame:\n\n# Print the DataFrame as a Markdown table, excluding the index\nmarkdown_table = df.to_markdown(index=False)\nprint(markdown_table)\n\nThis will output:\n| Name    | Age  | City     |\n|:--------|-----:|:---------|\n| Alice   |   25 | New York |\n| Bob     |   30 | London   |\n| Charlie |   35 | Paris    |\n\n\nStep 3: Display in Jupyter Notebook\nTo display the Markdown table in a Jupyter Notebook cell, use the display() function from the IPython.display module:\n\n# You should also have the IPython package installed if you installed Anaconda\n# If not, you can install it with\n# conda install ipython\n\n# Import the Markdown display class. \n# This is what allows us to display Markdown in Jupyter Notebooks \nfrom IPython.display import display, Markdown\n\n# Display the Markdown table\ndisplay(Markdown(markdown_table))\n\nThis will render a nicely formatted table in your notebook:\n\n\n\nMarkdown table in a Jupyter Notebook.\n\n\n\n\n\nAdvanced Formatting\nYou can customise the Markdown table using various parameters of to_markdown():\n\n# Customising the Markdown table using the to_markdown() method\nmarkdown_table = df.to_markdown(\n    index=False,  # Don't include index\n    tablefmt=\"pipe\",  # Use pipe format\n    floatfmt=\".2f\",  # Format floats to 2 decimal places\n    headers=[\"Name\", \"Age (Years)\", \"City\"],  # Custom headers\n    colalign=(\"left\", \"center\", \"right\")  # Align columns\n)\ndisplay(Markdown(markdown_table))\n\n\n\nUsing tabulate for Enhanced Formatting\nThe tabulate library offers even more formatting options. While they are not necessary for basic tables, they can be useful for more complex tables. In our course, you will probably not need them, but I will show you how to use them for your reference. Please check their documentation for more information.\n\nfrom tabulate import tabulate\n\nmarkdown_table = tabulate(df, headers='keys', tablefmt='pipe', showindex=False)\ndisplay(Markdown(markdown_table))\n\n\n\nBest Practices\n\nIndex: Consider whether you need the index in your table. Often, it is cleaner to exclude it using index=False.\nFormatting: Use floatfmt to control decimal places for numerical data.\nHeaders: Customize headers for clarity, especially if your DataFrame column names are not user-friendly.\nTable Format: Experiment with different tablefmt options to find the most suitable for your needs.\nLarge DataFrames: For large DataFrames, consider displaying only a subset of rows or columns to maintain readability.\n\n\n\nExample: Comprehensive Table Creation\nHere is a more comprehensive example incorporating various best practices:\n\n# Import necessary packages\nimport pandas as pd\nfrom IPython.display import display, Markdown\nfrom tabulate import tabulate\n\n# Create a sample DataFrame\ndata = {\n    \"Product\": [\"Laptop\", \"Smartphone\", \"Tablet\"],\n    \"Price\": [999.99, 599.50, 299.75],\n    \"Stock\": [50, 100, 75],\n    \"Rating\": [4.5, 4.8, 4.2]\n}\ndf = pd.DataFrame(data)\n\n# Create a formatted Markdown table\nmarkdown_table = tabulate(\n    df,\n    headers=[\"Product Name\", \"Price ($)\", \"Stock Quantity\", \"Customer Rating\"],\n    tablefmt=\"pipe\", # Format as Markdown table\n    floatfmt=(\".2f\", \".2f\", \"d\", \".1f\"),\n    showindex=False, # Don't show the index (row numbers)\n    numalign=\"right\", # Align numbers to the right\n    stralign=\"left\" # Align strings (text, first column) to the left\n)\n\n# Display the table in the notebook\ndisplay(Markdown(\"### Product Inventory Summary\"))\ndisplay(Markdown(markdown_table))\n\nThis will produce a well-formatted table with custom headers, appropriate number formatting, and a title.\n\n\n\nComprehensive Markdown table in a Jupyter Notebook."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#equations",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#equations",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Equations",
    "text": "Equations\nYou can create equations using the $$ symbol. For example in Equation¬†1, we have the formula for the standard deviation of a population:\n$$\n\\sigma = \\sqrt{\\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}}\n$$ {#eq-stddev}\n\\[\n\\sigma = \\sqrt{\\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}}\n\\tag{1}\\]\nYou can also create equations inline by using the $ symbol. For example, $\\alpha = \\beta + \\gamma$ will render as \\(\\alpha = \\beta + \\gamma\\). To learn more about how to write equations in using Markdown, you can refer to the Overleaf documentation."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#figures",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#figures",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Figures",
    "text": "Figures\nYou can include figures in your document using the ![Caption](path/to/image.png){#fig-label} syntax. For example:\n![This is a figure caption.](path/to/image.png){#fig-label}\nThis will include the image path/to/image.png in your document with the caption ‚ÄúThis is a figure caption.‚Äù You can refer to the figure using the label fig-label, but this is optional.\nIf you are creating plots on Jupyter Notebook, the graphs will appear after the code cell that generates them."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#citations",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#citations",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Citations",
    "text": "Citations\nAlthough Markdown has excellent reference support with BibTeX files, there is no reliable way to include citations automatically in Jupyter Notebooks. The two packages I know that manage citations, cite2c and Jupyterlab Citation Manager, are not ideal. The first has not been maintained for years, while the second is not ready for most uses. Therefore, I suggest simply copying the citation from Google Scholar and pasting it into a Markdown cell titled ‚ÄúReferences‚Äù at the end of your document. The same approach applies for inline citations."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#footnotes",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#footnotes",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is an inline footnote.‚Ü©Ô∏é\nYou can also include multiple paragraphs in a footnote by indenting the subsequent paragraphs.‚Ü©Ô∏é"
  },
  {
    "objectID": "tutorials/python-postgresql-example.html",
    "href": "tutorials/python-postgresql-example.html",
    "title": "PostgreSQL Example",
    "section": "",
    "text": "Here is an example of how to use PostgreSQL with Python. The example uses the psycopg2 library to connect to a PostgreSQL database and perform some basic operations. Please refer to tutorial 04 for more information.\n\n# Install the required packages\n# conda install psycopg2\n\n# Import the required library\nimport psycopg2\n\n# Connect to the database\nconn = psycopg2.connect(\n    host=\"localhost\", \n    port=5432,\n    database=\"tutorial\",\n    user=\"postgres\",\n    password=\"\") # Change the password to your password\n\n# Create a cursor object. This is used to interact with the database.\ncur = conn.cursor()\n\n\n# Now we will execute the queries\ncur.execute(\"SELECT * FROM students\")\n\n# Fetch the results\nrows = cur.fetchall()\n\n# Print the results\nfor row in rows:\n    print(row)\n\n(1, 'Alice', 25)\n(2, 'Bob', 30)\n(3, 'Charlie', 35)\n\n\n\n# Let us run another query\ncur.execute(\"SELECT * FROM students WHERE name = 'Bob' \")\n\n# Fetch the results\nrows = cur.fetchall()\n\n# Print the results\nfor row in rows:\n    print(row)\n\n(2, 'Bob', 30)\n\n\n\n# Close the cursor and the connection. This is important as it will free up the resources.\ncur.close()\n\n# Commit the transaction. This will save the changes to the database. \n# You do not need to do this if you are only reading from the database.\nconn.commit()\n\n# Close the connection\nconn.close()\n\n\n# Converting tables to pandas dataframe\n# Install the required packages\n# conda install pandas sqlalchemy\n\n# Import the required libraries\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\n# Create a connection to the database\n# The syntax is 'postgresql://username:password@host:port/database'\n# In our case, the username is postgres, password is blank, host is localhost, \n# port is 5432 and database is tutorial\nengine = create_engine('postgresql://postgres:@localhost:5432/tutorial')\n\n# Read the table into a pandas dataframe\ndf = pd.read_sql_table('students', engine)\n\n# Print the dataframe\nprint(df)\n\n   id     name  age\n0   1    Alice   25\n1   2      Bob   30\n2   3  Charlie   35\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "syllabus/syllabus.html",
    "href": "syllabus/syllabus.html",
    "title": "QTM 350",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "assignments/LICENSE.html",
    "href": "assignments/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignments.html",
    "href": "assignments/assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Here you will find information about the assignments for QTM 350. There are ten of them, each worth 5% of your final grade. The assignments are designed to help you practice the concepts covered in class and to develop your data science skills.\nAssignment submissions are typically due on Wednesdays at 11:59pm in the week following their publication. You may submit via Canvas (preferred) or email (danilo.freire@emory.edu).\nWe encourage you to complete assignments in Jupyter Notebooks. However, submissions in Quarto PDF format or Word are acceptable, provided that code and results are included in the same document.\nYou will find the assignments in .ipynb format in the assignments folder on the course repository. For your convenience, rendered versions are available on the course website; links are provided below.\nWhen submitting, please name your files as follows: assignment-01-your-name.ipynb. For instance: assignment-01-john-doe.ipynb."
  },
  {
    "objectID": "assignments/assignments.html#assignment-timeline",
    "href": "assignments/assignments.html#assignment-timeline",
    "title": "Assignments",
    "section": "Assignment Timeline",
    "text": "Assignment Timeline\n\n\n\nSession\nTopic\nAssignment\nSubmission Deadline\n\n\n\n\n02\nComputational Literacy\nAssignment 01\n2024-09-11"
  },
  {
    "objectID": "assignments/assignments.html#in-class-quizzes",
    "href": "assignments/assignments.html#in-class-quizzes",
    "title": "Assignments",
    "section": "In-Class Quizzes",
    "text": "In-Class Quizzes\nIn-class quizzes will be held on Wednesdays. They will be based on the material covered in the previous weeks. The quizzes will be open-book and open-notes, but you will not be allowed communicate with others during the quiz. They will be available in the quizzes folder on the course repository."
  },
  {
    "objectID": "assignments/assignments.html#final-project",
    "href": "assignments/assignments.html#final-project",
    "title": "Assignments",
    "section": "Final Project",
    "text": "Final Project\nThe final project will be a group effort, with a maximum of 3 students per group. Detailed instructions will be provided soon."
  },
  {
    "objectID": "assignments/01-assignment.html",
    "href": "assignments/01-assignment.html",
    "title": "QTM 350 - Data Science Computing",
    "section": "",
    "text": "This assignment evaluates your understanding of topics covered in the first two weeks of class, including binary and hexadecimal number systems, ASCII encoding, and programming language fundamentals.\nYou must complete this assignment individually. While you may use available resources such as notes, books, and AI tools, you are expected to submit original work. Please acknowledge all resources used, including input from classmates and AI. If you are unsure about permissible resources or proper acknowledgement, please consult the instructor.\nPresent your solutions clearly and systematically, showing your problem-solving process. Please ensure that any code is well-commented.\n\n\n\nPlease submit your solutions as either a single Jupyter notebook or a Quarto PDF file. Follow the instructions provided in each section carefully. Submit your completed assignment to Canvas or via email (danilo.freire@emory.edu) by Wednesday, September 11, at 11:59 PM.\n\n\n\nConvert the decimal number 53 to binary. Show your work.\n\n\n\nConvert the binary number 1011001 to decimal. Show your work.\n\n\n\nWhat is the hexadecimal representation of the RGB colour (128, 64, 255)? Explain your answer.\n\n\n\nConvert the hexadecimal colour #2A9F3B to its RGB components. Show your steps.\n\n\n\nUsing the coin representation system described in the lecture (c[quarters][dimes][nickels][pennies]), convert $1.37 to coin representation. Explain your reasoning.\n\n\n\nWhat is the Unicode representation of the word ‚ÄúEmory‚Äù? Use the Unicode table provided in the lecture to find out.\n\n\n\nExplain the difference between ASCII and Unicode. Why was Unicode developed, and what advantages does it offer over ASCII?\n\n\n\nDescribe the Von Neumann architecture and its significance in modern computing. What is the Von Neumann bottleneck, and how does it affect computer performance?\n\n\n\nCompare and contrast low-level and high-level programming languages. Give two examples of each and explain when you might choose to use one over the other.\n\n\n\nDiscuss the concept of abstraction in computer science, using the representation of images in computers as an example. How does this abstraction process impact data analysis and predictive modelling in image-related tasks?"
  },
  {
    "objectID": "assignments/01-assignment.html#assignment-01---computational-literacy",
    "href": "assignments/01-assignment.html#assignment-01---computational-literacy",
    "title": "QTM 350 - Data Science Computing",
    "section": "",
    "text": "This assignment evaluates your understanding of topics covered in the first two weeks of class, including binary and hexadecimal number systems, ASCII encoding, and programming language fundamentals.\nYou must complete this assignment individually. While you may use available resources such as notes, books, and AI tools, you are expected to submit original work. Please acknowledge all resources used, including input from classmates and AI. If you are unsure about permissible resources or proper acknowledgement, please consult the instructor.\nPresent your solutions clearly and systematically, showing your problem-solving process. Please ensure that any code is well-commented.\n\n\n\nPlease submit your solutions as either a single Jupyter notebook or a Quarto PDF file. Follow the instructions provided in each section carefully. Submit your completed assignment to Canvas or via email (danilo.freire@emory.edu) by Wednesday, September 11, at 11:59 PM.\n\n\n\nConvert the decimal number 53 to binary. Show your work.\n\n\n\nConvert the binary number 1011001 to decimal. Show your work.\n\n\n\nWhat is the hexadecimal representation of the RGB colour (128, 64, 255)? Explain your answer.\n\n\n\nConvert the hexadecimal colour #2A9F3B to its RGB components. Show your steps.\n\n\n\nUsing the coin representation system described in the lecture (c[quarters][dimes][nickels][pennies]), convert $1.37 to coin representation. Explain your reasoning.\n\n\n\nWhat is the Unicode representation of the word ‚ÄúEmory‚Äù? Use the Unicode table provided in the lecture to find out.\n\n\n\nExplain the difference between ASCII and Unicode. Why was Unicode developed, and what advantages does it offer over ASCII?\n\n\n\nDescribe the Von Neumann architecture and its significance in modern computing. What is the Von Neumann bottleneck, and how does it affect computer performance?\n\n\n\nCompare and contrast low-level and high-level programming languages. Give two examples of each and explain when you might choose to use one over the other.\n\n\n\nDiscuss the concept of abstraction in computer science, using the representation of images in computers as an example. How does this abstraction process impact data analysis and predictive modelling in image-related tasks?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QTM 350 - Data Science Computing",
    "section": "",
    "text": "Welcome to QTM 350! This course introduces key tools in modern data science, focusing on three essential aspects: reliability, reproducibility, and robustness. We will cover command line interfaces and vim, version control with Git and GitHub, and literate programming using Quarto and Jupyter Notebooks. You will also learn about data storage and manipulation with SQL and Pandas, and parallel computing with Dask. We will explore artificial intelligence-assisted programming with GitHub Copilot and finish with Docker and containerisation."
  },
  {
    "objectID": "index.html#contact-information",
    "href": "index.html#contact-information",
    "title": "QTM 350 - Data Science Computing",
    "section": "Contact Information",
    "text": "Contact Information\n\nDanilo Freire\n\nEmail: danilo.freire@emory.edu\nOffice hours: By appointment at any time (online or in person)."
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "QTM 350 - Data Science Computing",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nBy the end of this course, students will be able to:\n\nUse the command line interface to manage files and directories.\nWork with version control systems to track changes in code and collaborate with others.\nCreate reproducible reports and presentations.\nUse AI tools to assist with programming tasks.\nApply advanced techniques for data storage, manipulation, and querying.\nUnderstand the basics of containerisation and parallel computing."
  },
  {
    "objectID": "index.html#website-structure",
    "href": "index.html#website-structure",
    "title": "QTM 350 - Data Science Computing",
    "section": "Website Structure",
    "text": "Website Structure\nThis website contains the course syllabus, lecture materials, tutorials, and assignments for the course. The course repository at https://github.com/danilofreire/qtm350 is similarly structured. Feel free to explore the materials and use them as needed."
  },
  {
    "objectID": "index.html#getting-help",
    "href": "index.html#getting-help",
    "title": "QTM 350 - Data Science Computing",
    "section": "Getting Help",
    "text": "Getting Help\nIf you encounter any issues with the course materials or have questions about the content, please:\n\nCheck the course syllabus and this README for relevant information\nReview the lecture materials and tutorials in the repository\nConsult with your classmates or post in the course discussion forum\nAttend office hours or schedule an appointment with the instructor"
  },
  {
    "objectID": "index.html#contributing-to-the-repository",
    "href": "index.html#contributing-to-the-repository",
    "title": "QTM 350 - Data Science Computing",
    "section": "Contributing to the Repository",
    "text": "Contributing to the Repository\nWhile this repository is primarily maintained by the course instructor, everyone is welcome to contribute. Please feel free to suggest improvements or report issues by opening a GitHub issue, submitting a pull request, creating a discussion post, or contacting the instructor directly."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "QTM 350 - Data Science Computing",
    "section": "License",
    "text": "License\nThis repository is licensed under the MIT License. You are free to use, modify, and distribute the materials as needed, with appropriate attribution to the original source.\n\nWe look forward to an engaging and productive semester! Happy coding!"
  },
  {
    "objectID": "syllabus/LICENSE.html",
    "href": "syllabus/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html",
    "href": "tutorials/01-vscode-anaconda-tutorial.html",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "",
    "text": "This tutorial will guide students new to computer programming through the process of installing Visual Studio Code (VS Code) and connecting it with Anaconda. We will cover each step in detail to ensure a smooth setup process. If you have any questions or encounter issues during the installation, please feel free to ask for help from me (danilo.freire@emory.edu) or the QTM350 teaching assistants."
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-windows-users",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-windows-users",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Windows Users",
    "text": "For Windows Users\n\nRun the ‚ÄúVSCodeUserSetup-{version}.exe‚Äù file.\n\n\n\n\nWindows Installation\n\n\n\nAccept the license agreement and click ‚ÄúNext‚Äù.\n\n\n\n\nLicense Agreement\n\n\n\nChoose the installation location (default is recommended) and click ‚ÄúNext‚Äù.\n\n\n\n\nInstallation Location\n\n\n\nSelect additional tasks if desired (e.g., adding ‚ÄúOpen with Code‚Äù action) and click ‚ÄúNext‚Äù.\n\n\n\n\nAdditional Tasks\n\n\n\nClick ‚ÄúInstall‚Äù to begin the installation process.\n\n\n\n\nInstallation Progress"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-macos-users",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-macos-users",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For macOS Users",
    "text": "For macOS Users\n\nOpen the downloaded .zip file and drag the VS Code application to the Applications folder.\n\n\n\n\nUnzip file\n\n\n\n\n\nDrag to Applications folder"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-linux-users",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-linux-users",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Linux Users",
    "text": "For Linux Users\n\nFollow the distribution-specific instructions provided on the VS Code website."
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#launch-vs-code",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#launch-vs-code",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Launch VS Code",
    "text": "Launch VS Code\n\nAfter installation, launch VS Code.\nYou should see the welcome screen with options to start a new project or open existing files.\n\n\n\n\nVS Code Welcome Screen"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#getting-started",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#getting-started",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Getting Started",
    "text": "Getting Started\nMicrosoft has published a series of introductory videos to help you get started with VS Code. You can also read the official documentation for more detailed information."
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#download-anaconda",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#download-anaconda",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Download Anaconda",
    "text": "Download Anaconda\n\nVisit the Anaconda website: https://www.anaconda.com/products/distribution. You can skip the registration if you prefer.\n\n\n\n\nAnaconda Website\n\n\n\nClick on the ‚ÄúDownload‚Äù button for your operating system.\n\n\n\n\nDownload Anaconda"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-windows-users-1",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-windows-users-1",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Windows Users",
    "text": "For Windows Users\n\nChoose ‚ÄúJust Me‚Äù for the installation type (recommended).\n\n\n\n\nAnaconda Installation\n\n\n\nSelect the installation location (default is fine).\n\n\n\n\nAnaconda Installation\n\n\n\nIn the ‚ÄúAdvanced Options‚Äù section, check ‚ÄúAdd Anaconda to my PATH environment variable‚Äù and ‚ÄúRegister Anaconda as my default Python‚Äù.\n\n\n\n\nAdvanced Options"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-macos-users-1",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-macos-users-1",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For macOS Users",
    "text": "For macOS Users\n\nOpen the downloaded .pkg file and follow the installation instructions. You can install Anaconda for all users.\n\n\n\n\nAnaconda Installation\n\n\n\nFollow the on-screen instructions, accepting the default options.\n\n\n\n\nAnaconda Installation"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-linux-users-1",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-linux-users-1",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Linux Users",
    "text": "For Linux Users\n\nPlease follow the distribution-specific instructions provided on the Anaconda website."
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#verify-anaconda-installation",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#verify-anaconda-installation",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Verify Anaconda Installation",
    "text": "Verify Anaconda Installation\n\nOpen a new terminal or command prompt. On VS Code, you can do it by clicking on ‚ÄúTerminal‚Äù &gt; ‚ÄúNew Terminal‚Äù in the top menu.\nType conda --version and press Enter. You should see the Conda version number.\nType python --version and press Enter. You should see the Python version installed by Anaconda.\n\n\n\n\nVerify Anaconda Installation"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#install-the-python-and-jupyer-extensions-in-vs-code",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#install-the-python-and-jupyer-extensions-in-vs-code",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Install the Python and Jupyer Extensions in VS Code:",
    "text": "Install the Python and Jupyer Extensions in VS Code:\n\nOpen VS Code and click on the Extensions view icon on the left sidebar (it looks like four squares). Search for ‚ÄúPython‚Äù in the search bar.\n\n\n\n\nPython Extension in VS Code\n\n\n\nFind the official Python extension by Microsoft and click ‚ÄúInstall‚Äù.\nPlease also install the Jupyter extension for VS Code to work with Jupyter notebooks.\n\n\n\n\nJupyter Extension in VS Code"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#select-the-anaconda-python-interpreter",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#select-the-anaconda-python-interpreter",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Select the Anaconda Python Interpreter:",
    "text": "Select the Anaconda Python Interpreter:\n\nCreate a Python file in VS Code. Click on the ‚ÄúNew File‚Äù button in the top left corner and save it with a .py extension.\n\n\n\n\nNew Python File in VS Code\n\n\n\nInclude the following code in the file:\n\n\nimport sys\nprint(sys.version)\nprint(sys.executable)\n\n\nSave the file again. Here I saved it as testing-anaconda.py.\n\n\n\n\nSave Python File in VS Code\n\n\n\nPress Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (macOS) to open the Command Palette.\n\n\n\n\nCommand Palette in VS Code\n\n\n\nType ‚ÄúPython: Select Interpreter‚Äù and select it from the list.\n\n\n\n\nSelect Python Interpreter\n\n\n\nChoose the Anaconda Python interpreter from the list. It should be labelled something like ‚ÄúPython 3.x.x (‚Äòbase‚Äô) Conda‚Äù."
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#verify-the-connection",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#verify-the-connection",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Verify the Connection:",
    "text": "Verify the Connection:\n\nPlease click on the ‚ÄúRun‚Äù button at the top right corner of the editor to execute the code in your .py file. Select ‚ÄúRun Current File in Dedicated Terminal‚Äù\n\n\n\n\nRun Python File in VS Code\n\n\n\nThe output should show the Anaconda Python version and its location.\n\n\n\n\nPython Output in VS Code"
  },
  {
    "objectID": "tutorials/testing-ipython.html",
    "href": "tutorials/testing-ipython.html",
    "title": "Welcome to QTM 151!",
    "section": "",
    "text": "print(\"Welcome to QTM 151!\")\n\nx = 5\ny = 10\nz = x + y\nprint(z)\n\nWelcome to QTM 151!\n15\nThis is a Jupyter Notebook. You can write text, equations, and code in this notebook."
  },
  {
    "objectID": "tutorials/testing-ipython.html#footnotes",
    "href": "tutorials/testing-ipython.html#footnotes",
    "title": "Welcome to QTM 151!",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is the first footnote.‚Ü©Ô∏é\nThis is the second footnote.‚Ü©Ô∏é"
  },
  {
    "objectID": "tutorials/04-postgresql-tutorial.html",
    "href": "tutorials/04-postgresql-tutorial.html",
    "title": "PostgreSQL Tutorial",
    "section": "",
    "text": "Here we will learn how to use PostgreSQL, a powerful object-relational database system. The tutorial has instructions for installing PostgreSQL on your computer, using VS Code as a client, and writing SQL queries to interact with the database. It also includes a section on how to integrate PostgreSQL with Python via the psycopg2 library."
  },
  {
    "objectID": "tutorials/04-postgresql-tutorial.html#footnotes",
    "href": "tutorials/04-postgresql-tutorial.html#footnotes",
    "title": "PostgreSQL Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIn SQL, a database is a system that stores and organises multiple sets of related data. It typically contains several tables, each of which is a structured collection of data arranged in rows and columns. For instance, a ‚ÄòSchool‚Äô database might contain separate tables for ‚ÄòStudents‚Äô, ‚ÄòTeachers‚Äô, and ‚ÄòClasses‚Äô. Each table would store specific information: the ‚ÄòStudents‚Äô table might have columns for student ID, name, and year group, with each row representing an individual student‚Äôs details. Databases can also contain objects other than tables, such as views (virtual tables used for data retrieval), indexes (optimised data structures for faster data retrieval), and stored procedures (predefined SQL queries that can be reused). While databases are managed by Database Management Systems (DBMS), such as PostgreSQL, and handle overall data organisation and integrity, tables are manipulated using SQL commands for specific data operations within their structure, as we will see below.‚Ü©Ô∏é"
  },
  {
    "objectID": "tutorials/LICENSE.html",
    "href": "tutorials/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#brief-recap-of-last-class",
    "href": "lectures/lecture-03/03-command-line.html#brief-recap-of-last-class",
    "title": "QTM 350 - Data Science Computing",
    "section": "Brief recap of last class",
    "text": "Brief recap of last class\nEarly computing and data representation\n\n\n\n\nComputers evolved from people to mechanical calculators to silicon-based machines\nModern computers use the Von Neumann architecture, storing both instructions and data in memory\nComputers represent data using binary (base 2) numbers made up of 0s and 1s\nA bit is a single binary digit; 8 bits make a byte\nHexadecimal (base 16) is a compact way to represent binary, with each hex digit corresponding to 4 bits\nAbstraction allows representing complex data like images and text using numbers"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#brief-recap-of-last-class-1",
    "href": "lectures/lecture-03/03-command-line.html#brief-recap-of-last-class-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Brief recap of last class",
    "text": "Brief recap of last class\nRepresenting images, colours and text\n\n\n\n\nImages can be broken down into a grid of coloured pixels\nColours are represented using the RGB model, with each colour channel (red, green, blue) ranging from 0-255\n8-bit color uses 256 levels per channel, allowing for over 16 million possible colors\nText is broken into individual characters, with each character mapped to a number using an encoding like ASCII\nASCII is a simple lookup table mapping the numbers 0-255 to characters\nUnicode extends ASCII to support accented characters and symbols from all languages"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#brief-recap-of-last-class-2",
    "href": "lectures/lecture-03/03-command-line.html#brief-recap-of-last-class-2",
    "title": "QTM 350 - Data Science Computing",
    "section": "Brief recap of last class",
    "text": "Brief recap of last class\nProgramming languages\n\n\n\n\nKonrad Zuse created the first programmable computers and high-level programming language in the 1940s\nAssembly allows writing human-readable instructions that map closely to machine code\nHigh-level languages like Python abstract away hardware details and are more portable across systems\nLow-level languages are harder to read and write but very fast and efficient\nCompiled languages are converted to machine code before execution; interpreted languages are executed on the fly"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#todays-lecture",
    "href": "lectures/lecture-03/03-command-line.html#todays-lecture",
    "title": "QTM 350 - Data Science Computing",
    "section": "Today‚Äôs lecture",
    "text": "Today‚Äôs lecture\nCommand line: the old school way of interacting with computers\n\n\n\n\nToday, we will learn about the command line, a text-based interface to interact with computers\nWe will learn about basic commands to navigate the file system, create and delete files, and run programs\nWe will also learn about shell scripting, a way to automate tasks using the command line\nThe command line is still widely used in data science and programming, especially for remote servers, cloud computing, and automation"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#a-computer-in-a-nutshell",
    "href": "lectures/lecture-03/03-command-line.html#a-computer-in-a-nutshell",
    "title": "QTM 350 - Data Science Computing",
    "section": "A computer in a nutshell",
    "text": "A computer in a nutshell\nOperating system\n\n\n\n Credit Dave Kerr\n\n\nThe operating system (OS) is system software that interfaces with (and manages access to) a computer‚Äôs hardware. It also provides software resources\nThe OS is divided into the kernel and user space\nThe kernel is the core of the OS. It‚Äôs responsible for interfacing with hardware (drivers), managing resources etc. Running software in the kernel is extremely sensitive! That‚Äôs why users are kept away from it!\nThe user space provides an interface for users, who can run programs/applications on the machine. Hardware access of programmes (e.g., memory usage) is managed by the kernel. Programmes in user space are essentially in sandboxes, which sets a limit to how much damage they can do."
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#a-computer-in-a-nutshell-1",
    "href": "lectures/lecture-03/03-command-line.html#a-computer-in-a-nutshell-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "A computer in a nutshell",
    "text": "A computer in a nutshell\nKernels and shells\n\n\n\n  Credit Dave Kerr/Kkchaudhary11\n\n\nThe shell is just a general name for any user space program that allows access to resources in the system, via some kind of interface\nShells come in many different flavours but are generally provided to aid a human operator in accessing the system. This could be interactively, by typing at a terminal, or via scripts, which are files that contain a sequence of commands\nModern computers use graphical user interfaces (GUIs) as the standard tool for human-computer interaction\nWhy ‚Äúkernel‚Äù and ‚Äúshell‚Äù? The kernel is the soft, edible part of a nut or seed, which is surrounded by a shell to protect it. Useful metaphor, innit?"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#interacting-with-the-shell",
    "href": "lectures/lecture-03/03-command-line.html#interacting-with-the-shell",
    "title": "QTM 350 - Data Science Computing",
    "section": "Interacting with the shell",
    "text": "Interacting with the shell\nTerminals\n\n\n\n Credit Dave Kerr\n\n\nThings are still a bit more complicated\nWe‚Äôre not directly interacting with the ‚Äúshell‚Äù but using a terminal\nA terminal is just a program that reads input from the keyboard, passes that input to another programme, and displays the results on the screen\nA shell program on its own does not do this - it requires a terminal as an interface\nWhy ‚Äúterminal‚Äù? Back in the old days (before computer screen existed), terminal machines (hardware!) were used to let humans interface with large machines (‚Äúmainframes‚Äù). Often many terminals were connected to a single machine\nWhen you want to work with a computer in a data center (or remotely in cloud computing), you‚Äôll still do pretty much the same"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#interacting-with-the-shell-1",
    "href": "lectures/lecture-03/03-command-line.html#interacting-with-the-shell-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Interacting with the shell",
    "text": "Interacting with the shell\nCommand line\n\n\n\n Credit Dave Kerr\n\n\nTerminals are really quite simple - they‚Äôre just interfaces.\nThe first thing that a terminal program will do is run a shell program - a program that we can use to operate the computer.\nBack to the shell: the shell usually takes input\n\nInteractively from the user via the terminal‚Äôs command line.\nExecutes scripts (without command line).\n\nIn interactive mode the shell then returns output\n\nTo the terminal where it is printed/shown.\nTo files or other locations.\n\nThe command line (or command prompt) represents what is shown and entered in the terminal. They can be customised (e.g., with color highlighting) to make interaction more convenient."
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#shell-variants",
    "href": "lectures/lecture-03/03-command-line.html#shell-variants",
    "title": "QTM 350 - Data Science Computing",
    "section": "Shell variants",
    "text": "Shell variants\nBash, Zsh, and others\n\n\n\n\n\n\nIt is important to note that there are many different shell programmes, and they differ in terms of functionality\nOn most Unix-like systems, the default shell is a program called bash, which stands for ‚ÄúBourne Again Shell‚Äù\nOther examples are the Z Shell (or zsh; default on MacOS), Windows Command Prompt (cmd.exe, the default CLI on MS Windows), Windows PowerShell, C Shell, and many more\nWhen a terminal opens, it will immediately start the user‚Äôs preferred shell programme. (This can be changed.)"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#why-bother-with-the-shell-1",
    "href": "lectures/lecture-03/03-command-line.html#why-bother-with-the-shell-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Why bother with the shell?",
    "text": "Why bother with the shell?\n\n\n\n\nWhy should you use this‚Ä¶\n\n\n\n\n‚Ä¶ instead of this?"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#why-bother-with-the-shell-2",
    "href": "lectures/lecture-03/03-command-line.html#why-bother-with-the-shell-2",
    "title": "QTM 350 - Data Science Computing",
    "section": "Why bother with the shell?",
    "text": "Why bother with the shell?\nThe programmer‚Äôs best friend\n\n\n\nSpeed. Typing is fast: A skilled shell user can manipulate a system at dazzling speeds just using a keyboard. Typing commands is generally much faster than exploring through user interfaces with a mouse.\nPower. Both for executing commands and for fixing problems. There are some things you just can‚Äôt do in an IDE or GUI. It also avoids memory complications associated with certain applications and/or IDEs.\nReproducibility. Scripting is reproducible, while clicking is not.\nPortability. A shell can be used to interface to almost any type of computer, from a mainframe to a Raspberry Pi, in a very similar way. The shell is often the only game in town for high performance computing (interacting with servers and super computers).\nAutomation. Shells are programmable: Working in the shell allows you to program workflows, that is create scripts to automate time-consuming or repetitive processes.\nBecome a marketable data scientist. Modern programming is often polyglot. The shell provides a common interface for tooling. Modern solutions are often built to run in containers on Linux. In this environment shell knowledge has become very valuable. In short, the shell is having a renaissance in the age of data science."
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#the-unix-philosophy-1",
    "href": "lectures/lecture-03/03-command-line.html#the-unix-philosophy-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "The Unix philosophy",
    "text": "The Unix philosophy\n\n\nThe shell tools that we‚Äôre going to be using have their roots in the Unix family of operating systems originally developed at Bells Labs in the 1970s.\nBesides paying homage, acknowledging the Unix lineage is important because these tools still embody the ‚ÄúUnix philosophy‚Äù:\n\nDo One Thing And Do It Well\n\nBy pairing and chaining well-designed individual components, we can build powerful and much more complex larger systems.\nYou can see why the Unix philosophy is also referred to as ‚Äúminimalist and modular‚Äù.\nAgain, this philosophy is very clearly expressed in the design and functionality of the Unix shell."
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#things-to-use-the-shell-for",
    "href": "lectures/lecture-03/03-command-line.html#things-to-use-the-shell-for",
    "title": "QTM 350 - Data Science Computing",
    "section": "Things to use the shell for",
    "text": "Things to use the shell for\n\n\n\nNavigating the file system\nVersion control with Git\nRenaming and moving files\nFinding things on your computer\nWriting and running code\nInstalling and updating software\nMonitoring system resources\nConnecting to cloud environments\nRunning analyses (‚Äújobs‚Äù) on super computers\n‚Ä¶ and much more!"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#shell-first-look",
    "href": "lectures/lecture-03/03-command-line.html#shell-first-look",
    "title": "QTM 350 - Data Science Computing",
    "section": "Shell: First look",
    "text": "Shell: First look\n\nLet‚Äôs open up our shell!\nA convenient way to do this is through VSCode‚Äôs built-in Terminal.\nClick on the View menu, then Terminal. You can also use the shortcut Ctrl+ (backtick).\nYour system default shell is loaded. To find out what that is, type echo $SHELL in the terminal.\n\n$ echo $SHELL\n\n/bin/zsh\n\n\nIt‚Äôs Z shell in my case.\nOf course, it‚Äôs always possible to open up the Shell directly if you prefer. It‚Äôs your turn!\n\nLinux\nMac\nWindows"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#shell-first-look-1",
    "href": "lectures/lecture-03/03-command-line.html#shell-first-look-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Shell: First look",
    "text": "Shell: First look\n\nYou should see something like:\n\n$  username@hostname:~$\n\nThis is shell-speak for: ‚ÄúWho am I and where am I?‚Äù (Type in $ whoami without the leading dollar sign to confirm)\n\nusername denotes a specific user (one of potentially many on this computer).\n@hostname denotes the name of the computer or server.\n:~ denotes the directory path (where ~ signifies the user‚Äôs home directory).\n$ (or maybe %) denotes the start of the command prompt.\n\n(For a special ‚Äúsuperuser‚Äù called root, the dollar sign will change to a #).\n\n\n\n$ whoami\n$ pwd\n\npoliticaltheory\n/Users/politicaltheory/Documents/github/qtm350/lectures/lecture-03"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#useful-keyboard-shortcuts",
    "href": "lectures/lecture-03/03-command-line.html#useful-keyboard-shortcuts",
    "title": "QTM 350 - Data Science Computing",
    "section": "Useful keyboard shortcuts",
    "text": "Useful keyboard shortcuts\n\nTab completion.\nUse the ‚Üë (and ‚Üì) keys to scroll through previous commands.\nCtrl+‚Üí (and Ctrl+‚Üê) to skip whole words at a time.\nCtrl+a moves the cursor to the beginning of the line.\nCtrl+e moves the cursor to the end of the line.\nCtrl+k deletes everything to the right of the cursor.\nCtrl+u deletes everything to the left of the cursor.\nCtrl+Shift+c to copy and Ctrl+Shift+v to paste (or just ‚åò+ c/v on a Mac).\nCtrl+l clears your terminal."
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#syntax-1",
    "href": "lectures/lecture-03/03-command-line.html#syntax-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Syntax",
    "text": "Syntax\n\n\n\nAll Bash commands have the same basic syntax:\ncommand option(s) argument(s)\nExamples:\n\n$ # list files in the Documents directory \n$ # with human-readable sizes\n$ \n$ ls -lh ~/Documents \n\n\n\n$ # sort the file and remove duplicates\n$ \n$ sort -u file.txt \n\n\nCommands\n\nYou don‚Äôt always need options or arguments.\nFor example:\n\n$ ls ~/Documents/ and $ ls -lh are both valid commands that will yield output.\n\nHowever, you always need a command."
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#syntax-2",
    "href": "lectures/lecture-03/03-command-line.html#syntax-2",
    "title": "QTM 350 - Data Science Computing",
    "section": "Syntax",
    "text": "Syntax\n\n\n\nAll Bash commands have the same basic syntax:\ncommand option(s) argument(s)\nExamples:\n\n$ # list files in the Documents directory \n$ # with human-readable sizes\n$ \n$ ls -lh ~/Documents \n\n\n\n$ # sort the file and remove duplicates\n$ \n$ sort -u file.txt \n\n\nOptions (also called Flags)\n\nStart with a dash. Usually one letter.\nMultiple options can be chained under a single dash.\n\n$ ls -l -a -h /var/log ## This works\n$ ls -lah /var/log ## So does this\n\nAn exception is with (rarer) options requiring two dashes.\n\n$ ls --group-directories-first --human-readable /var/log\n\nl: Use a long listing format. This option shows detailed information about the files and directories\nh: With -l, print sizes in human-readable format (e.g., KB, MB)\nu: Unique, it filters out the duplicate entries in the output\nThink it‚Äôs difficult to memorize what the individual letters stand for? You‚Äôre totally right!"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#syntax-3",
    "href": "lectures/lecture-03/03-command-line.html#syntax-3",
    "title": "QTM 350 - Data Science Computing",
    "section": "Syntax",
    "text": "Syntax\n\n\n\nAll Bash commands have the same basic syntax:\ncommand option(s) argument(s)\nExamples:\n\n$ $ ls -lh ~/Documents/\n\n\n\n$ $ sort -u file.txt\n\n\nArguments\n\nTell the command what to operate on.\nTotally depends on the command what legit inputs are.\nCan be a file, path, a set of files and folders, a string, and more\nSometimes more than just one argument is needed:\n\n$ mv figs/cat.png best-figs/cat02.png"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#multiple-ways-to-get-help",
    "href": "lectures/lecture-03/03-command-line.html#multiple-ways-to-get-help",
    "title": "QTM 350 - Data Science Computing",
    "section": "Multiple ways to get help",
    "text": "Multiple ways to get help\n\n\n\n\nThe man tool can be used to look at the manual page for a topic.\nThe man pages are grouped into sections, we can see them with man man.\nThe cht.sh website can be used directly from the shell to get help on tools. Run it like this: curl cht.sh/command"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#multiple-ways-to-get-help-1",
    "href": "lectures/lecture-03/03-command-line.html#multiple-ways-to-get-help-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Multiple ways to get help",
    "text": "Multiple ways to get help\n\n\n\n\nYou can also install the tldr tool which provides simplified help pages for common commands. Run it like this: tldr command\n\n\n$ tldr ls\n\n\n  ls\n\n  List directory contents.\n  More information: https://www.gnu.org/software/coreutils/ls.\n\n  List files one per line:\n\n    ls -1\n\n  List all files, including hidden files:\n\n    ls -a\n\n  List all files, with trailing / added to directory names:\n\n    ls -F\n\n  Long format list (permissions, ownership, size, and modification date) of all files:\n\n    ls -la\n\n  Long format list with size displayed using human-readable units (KiB, MiB, GiB):\n\n    ls -lh\n\n  Long format list sorted by size (descending) recursively:\n\n    ls -lSR\n\n  Long format list of all files, sorted by modification date (oldest first):\n\n    ls -ltr\n\n  Only list directories:\n\n    ls -d */\n\n\n\n\n\nFor more info on how to get help, see here."
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#getting-help-with-man",
    "href": "lectures/lecture-03/03-command-line.html#getting-help-with-man",
    "title": "QTM 350 - Data Science Computing",
    "section": "Getting help with man",
    "text": "Getting help with man\n\nThe man command (‚Äúmanual pages‚Äù) is your friend if you need help.\n\n$ man ls\n\nLS(1)                        General Commands Manual                       LS(1)\n\nN\bNA\bAM\bME\bE\n     l\bls\bs ‚Äì list directory contents\n\nS\bSY\bYN\bNO\bOP\bPS\bSI\bIS\bS\n     l\bls\bs [-\b-@\b@A\bAB\bBC\bCF\bFG\bGH\bHI\bIL\bLO\bOP\bPR\bRS\bST\bTU\bUW\bWa\bab\bbc\bcd\bde\bef\bfg\bgh\bhi\bik\bkl\blm\bmn\bno\bop\bpq\bqr\brs\bst\btu\buv\bvw\bwx\bxy\by1\b1%\b%,\b,] [-\b--\b-c\bco\bol\blo\bor\br=_\bw_\bh_\be_\bn]\n        [-\b-D\bD _\bf_\bo_\br_\bm_\ba_\bt] [_\bf_\bi_\bl_\be _\b._\b._\b.]\n\nD\bDE\bES\bSC\bCR\bRI\bIP\bPT\bTI\bIO\bON\bN\n     For each operand that names a _\bf_\bi_\bl_\be of a type other than directory, l\bls\bs\n     displays its name as well as any requested, associated information.  For\n     each operand that names a _\bf_\bi_\bl_\be of type directory, l\bls\bs displays the names of\n     files contained within that directory, as well as any requested, associated\n     information.\n\n     If no operands are given, the contents of the current directory are\n     displayed.  If more than one operand is given, non-directory operands are\n     displayed first; directory and non-directory operands are sorted separately\n     and in lexicographical order.\n\n     The following options are available:\n\n     -\b-@\b@      Display extended attribute keys and sizes in long (-\b-l\bl) output.\n\n     -\b-A\bA      Include directory entries whose names begin with a dot (‚Äò_\b.‚Äô) except\n             for _\b. and _\b._\b..  Automatically set for the super-user unless -\b-I\bI is\n             specified.\n\n     -\b-B\bB      Force printing of non-printable characters (as defined by ctype(3)\n             and current locale settings) in file names as \\_\bx_\bx_\bx, where _\bx_\bx_\bx is\n             the numeric value of the character in octal.  This option is not\n             defined in IEEE Std 1003.1-2008 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-C\bC      Force multi-column output; this is the default when output is to a\n             terminal.\n\n     -\b-D\bD _\bf_\bo_\br_\bm_\ba_\bt\n             When printing in the long (-\b-l\bl) format, use _\bf_\bo_\br_\bm_\ba_\bt to format the\n             date and time output.  The argument _\bf_\bo_\br_\bm_\ba_\bt is a string used by\n             strftime(3).  Depending on the choice of format string, this may\n             result in a different number of columns in the output.  This option\n             overrides the -\b-T\bT option.  This option is not defined in IEEE Std\n             1003.1-2008 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-F\bF      Display a slash (‚Äò/‚Äô) immediately after each pathname that is a\n             directory, an asterisk (‚Äò*‚Äô) after each that is executable, an at\n             sign (‚Äò@‚Äô) after each symbolic link, an equals sign (‚Äò=‚Äô) after\n             each socket, a percent sign (‚Äò%‚Äô) after each whiteout, and a\n             vertical bar (‚Äò|‚Äô) after each that is a FIFO.\n\n     -\b-G\bG      Enable colorized output.  This option is equivalent to defining\n             CLICOLOR or COLORTERM in the environment and setting -\b--\b-c\bco\bol\blo\bor\br=_\ba_\bu_\bt_\bo.\n             (See below.)  This functionality can be compiled out by removing\n             the definition of COLORLS.  This option is not defined in IEEE Std\n             1003.1-2008 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-H\bH      Symbolic links on the command line are followed.  This option is\n             assumed if none of the -\b-F\bF, -\b-d\bd, or -\b-l\bl options are specified.\n\n     -\b-I\bI      Prevent -\b-A\bA from being automatically set for the super-user.  This\n             option is not defined in IEEE Std 1003.1-2008 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-L\bL      Follow all symbolic links to final target and list the file or\n             directory the link references rather than the link itself.  This\n             option cancels the -\b-P\bP option.\n\n     -\b-O\bO      Include the file flags in a long (-\b-l\bl) output.  This option is\n             incompatible with IEEE Std 1003.1-2008 (‚ÄúPOSIX.1‚Äù).  See chflags(1)\n             for a list of file flags and their meanings.\n\n     -\b-P\bP      If argument is a symbolic link, list the link itself rather than\n             the object the link references.  This option cancels the -\b-H\bH and -\b-L\bL\n             options.\n\n     -\b-R\bR      Recursively list subdirectories encountered.\n\n     -\b-S\bS      Sort by size (largest file first) before sorting the operands in\n             lexicographical order.\n\n     -\b-T\bT      When printing in the long (-\b-l\bl) format, display complete time\n             information for the file, including month, day, hour, minute,\n             second, and year.  The -\b-D\bD option gives even more control over the\n             output format.  This option is not defined in IEEE Std 1003.1-2008\n             (‚ÄúPOSIX.1‚Äù).\n\n     -\b-U\bU      Use time when file was created for sorting or printing.  This\n             option is not defined in IEEE Std 1003.1-2008 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-W\bW      Display whiteouts when scanning directories.  This option is not\n             defined in IEEE Std 1003.1-2008 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-a\ba      Include directory entries whose names begin with a dot (‚Äò_\b.‚Äô).\n\n     -\b-b\bb      As -\b-B\bB, but use C escape codes whenever possible.  This option is\n             not defined in IEEE Std 1003.1-2008 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-c\bc      Use time when file status was last changed for sorting or printing.\n\n     -\b--\b-c\bco\bol\blo\bor\br=_\bw_\bh_\be_\bn\n             Output colored escape sequences based on _\bw_\bh_\be_\bn, which may be set to\n             either a\bal\blw\bwa\bay\bys\bs, a\bau\but\bto\bo, or n\bne\bev\bve\ber\br.\n\n             a\bal\blw\bwa\bay\bys\bs will make l\bls\bs always output color.  If TERM is unset or set\n             to an invalid terminal, then l\bls\bs will fall back to explicit ANSI\n             escape sequences without the help of termcap(5).  a\bal\blw\bwa\bay\bys\bs is the\n             default if -\b--\b-c\bco\bol\blo\bor\br is specified without an argument.\n\n             a\bau\but\bto\bo will make l\bls\bs output escape sequences based on termcap(5), but\n             only if stdout is a tty and either the -\b-G\bG flag is specified or the\n             COLORTERM environment variable is set and not empty.\n\n             n\bne\bev\bve\ber\br will disable color regardless of environment variables.\n             n\bne\bev\bve\ber\br is the default when neither -\b--\b-c\bco\bol\blo\bor\br nor -\b-G\bG is specified.\n\n             For compatibility with GNU coreutils, l\bls\bs supports y\bye\bes\bs or f\bfo\bor\brc\bce\be as\n             equivalent to a\bal\blw\bwa\bay\bys\bs, n\bno\bo or n\bno\bon\bne\be as equivalent to n\bne\bev\bve\ber\br, and t\btt\bty\by or\n             i\bif\bf-\b-t\btt\bty\by as equivalent to a\bau\but\bto\bo.\n\n     -\b-d\bd      Directories are listed as plain files (not searched recursively).\n\n     -\b-e\be      Print the Access Control List (ACL) associated with the file, if\n             present, in long (-\b-l\bl) output.\n\n     -\b-f\bf      Output is not sorted.  This option turns on -\b-a\ba.  It also negates\n             the effect of the -\b-r\br, -\b-S\bS and -\b-t\bt options.  As allowed by IEEE Std\n             1003.1-2008 (‚ÄúPOSIX.1‚Äù), this option has no effect on the -\b-d\bd, -\b-l\bl,\n             -\b-R\bR and -\b-s\bs options.\n\n     -\b-g\bg      This option has no effect.  It is only available for compatibility\n             with 4.3BSD, where it was used to display the group name in the\n             long (-\b-l\bl) format output.  This option is incompatible with IEEE Std\n             1003.1-2008 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-h\bh      When used with the -\b-l\bl option, use unit suffixes: Byte, Kilobyte,\n             Megabyte, Gigabyte, Terabyte and Petabyte in order to reduce the\n             number of digits to four or fewer using base 2 for sizes.  This\n             option is not defined in IEEE Std 1003.1-2008 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-i\bi      For each file, print the file's file serial number (inode number).\n\n     -\b-k\bk      This has the same effect as setting environment variable BLOCKSIZE\n             to 1024, except that it also nullifies any -\b-h\bh options to its left.\n\n     -\b-l\bl      (The lowercase letter ‚Äúell‚Äù.) List files in the long format, as\n             described in the _\bT_\bh_\be _\bL_\bo_\bn_\bg _\bF_\bo_\br_\bm_\ba_\bt subsection below.\n\n     -\b-m\bm      Stream output format; list files across the page, separated by\n             commas.\n\n     -\b-n\bn      Display user and group IDs numerically rather than converting to a\n             user or group name in a long (-\b-l\bl) output.  This option turns on the\n             -\b-l\bl option.\n\n     -\b-o\bo      List in long format, but omit the group id.\n\n     -\b-p\bp      Write a slash (‚Äò/‚Äô) after each filename if that file is a\n             directory.\n\n     -\b-q\bq      Force printing of non-graphic characters in file names as the\n             character ‚Äò?‚Äô; this is the default when output is to a terminal.\n\n     -\b-r\br      Reverse the order of the sort.\n\n     -\b-s\bs      Display the number of blocks used in the file system by each file.\n             Block sizes and directory totals are handled as described in _\bT_\bh_\be\n             _\bL_\bo_\bn_\bg _\bF_\bo_\br_\bm_\ba_\bt subsection below, except (if the long format is not\n             also requested) the directory totals are not output when the output\n             is in a single column, even if multi-column output is requested.\n             (-\b-l\bl) format, display complete time information for the file,\n             including month, day, hour, minute, second, and year.  The -\b-D\bD\n             option gives even more control over the output format.  This option\n             is not defined in IEEE Std 1003.1-2008 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-t\bt      Sort by descending time modified (most recently modified first).\n             If two files have the same modification timestamp, sort their names\n             in ascending lexicographical order.  The -\b-r\br option reverses both of\n             these sort orders.\n\n             Note that these sort orders are contradictory: the time sequence is\n             in descending order, the lexicographical sort is in ascending\n             order.  This behavior is mandated by IEEE Std 1003.2 (‚ÄúPOSIX.2‚Äù).\n             This feature can cause problems listing files stored with\n             sequential names on FAT file systems, such as from digital cameras,\n             where it is possible to have more than one image with the same\n             timestamp.  In such a case, the photos cannot be listed in the\n             sequence in which they were taken.  To ensure the same sort order\n             for time and for lexicographical sorting, set the environment\n             variable LS_SAMESORT or use the -\b-y\by option.  This causes l\bls\bs to\n             reverse the lexicographical sort order when sorting files with the\n             same modification timestamp.\n\n     -\b-u\bu      Use time of last access, instead of time of last modification of\n             the file for sorting (-\b-t\bt) or long printing (-\b-l\bl).\n\n     -\b-v\bv      Force unedited printing of non-graphic characters; this is the\n             default when output is not to a terminal.\n\n     -\b-w\bw      Force raw printing of non-printable characters.  This is the\n             default when output is not to a terminal.  This option is not\n             defined in IEEE Std 1003.1-2001 (‚ÄúPOSIX.1‚Äù).\n\n     -\b-x\bx      The same as -\b-C\bC, except that the multi-column output is produced\n             with entries sorted across, rather than down, the columns.\n\n     -\b-y\by      When the -\b-t\bt option is set, sort the alphabetical output in the same\n             order as the time output.  This has the same effect as setting\n             LS_SAMESORT.  See the description of the -\b-t\bt option for more\n             details.  This option is not defined in IEEE Std 1003.1-2001\n             (‚ÄúPOSIX.1‚Äù).\n\n     -\b-%\b%      Distinguish dataless files and directories with a '%' character in\n             long\n\n     -\b-1\b1      (The numeric digit ‚Äúone‚Äù.) Force output to be one entry per line.\n             This is the default when output is not to a terminal.  (-\b-l\bl) output,\n             and don't materialize dataless directories when listing them.\n\n     -\b-,      (Comma) When the -\b-l\bl option is set, print file sizes grouped and\n             separated by thousands using the non-monetary separator returned by\n             localeconv(3), typically a comma or period.  If no locale is set,\n             or the locale does not have a non-monetary separator, this option\n             has no effect.  This option is not defined in IEEE Std 1003.1-2001\n             (‚ÄúPOSIX.1‚Äù).\n\n     The -\b-1\b1, -\b-C\bC, -\b-x\bx, and -\b-l\bl options all override each other; the last one\n     specified determines the format used.\n\n     The -\b-c\bc, -\b-u\bu, and -\b-U\bU options all override each other; the last one specified\n     determines the file time used.\n\n     The -\b-S\bS and -\b-t\bt options override each other; the last one specified\n     determines the sort order used.\n\n     The -\b-B\bB, -\b-b\bb, -\b-w\bw, and -\b-q\bq options all override each other; the last one\n     specified determines the format used for non-printable characters.\n\n     The -\b-H\bH, -\b-L\bL and -\b-P\bP options all override each other (either partially or\n     fully); they are applied in the order specified.\n\n     By default, l\bls\bs lists one entry per line to standard output; the exceptions\n     are to terminals or when the -\b-C\bC or -\b-x\bx options are specified.\n\n     File information is displayed with one or more ‚ü®blank‚ü©s separating the\n     information associated with the -\b-i\bi, -\b-s\bs, and -\b-l\bl options.\n\n   T\bTh\bhe\be L\bLo\bon\bng\bg F\bFo\bor\brm\bma\bat\bt\n     If the -\b-l\bl option is given, the following information is displayed for each\n     file: file mode, number of links, owner name, group name, number of bytes\n     in the file, abbreviated month, day-of-month file was last modified, hour\n     file last modified, minute file last modified, and the pathname.  If the\n     file or directory has extended attributes, the permissions field printed by\n     the -\b-l\bl option is followed by a '@' character.  Otherwise, if the file or\n     directory has extended security information (such as an access control\n     list), the permissions field printed by the -\b-l\bl option is followed by a '+'\n     character.  If the -\b-%\b% option is given, a '%' character follows the\n     permissions field for dataless files and directories, possibly replacing\n     the '@' or '+' character.\n\n     If the modification time of the file is more than 6 months in the past or\n     future, and the -\b-D\bD or -\b-T\bT are not specified, then the year of the last\n     modification is displayed in place of the hour and minute fields.\n\n     If the owner or group names are not a known user or group name, or the -\b-n\bn\n     option is given, the numeric ID's are displayed.\n\n     If the file is a character special or block special file, the device number\n     for the file is displayed in the size field.  If the file is a symbolic\n     link the pathname of the linked-to file is preceded by ‚Äú-&gt;‚Äù.\n\n     The listing of a directory's contents is preceded by a labeled total number\n     of blocks used in the file system by the files which are listed as the\n     directory's contents (which may or may not include _\b. and _\b._\b. and other files\n     which start with a dot, depending on other options).\n\n     The default block size is 512 bytes.  The block size may be set with option\n     -\b-k\bk or environment variable BLOCKSIZE.  Numbers of blocks in the output will\n     have been rounded up so the numbers of bytes is at least as many as used by\n     the corresponding file system blocks (which might have a different size).\n\n     The file mode printed under the -\b-l\bl option consists of the entry type and\n     the permissions.  The entry type character describes the type of file, as\n     follows:\n\n           -\b-     Regular file.\n           b\bb     Block special file.\n           c\bc     Character special file.\n           d\bd     Directory.\n           l\bl     Symbolic link.\n           p\bp     FIFO.\n           s\bs     Socket.\n           w\bw     Whiteout.\n\n     The next three fields are three characters each: owner permissions, group\n     permissions, and other permissions.  Each field has three character\n     positions:\n\n           1.   If r\br, the file is readable; if -\b-, it is not readable.\n\n           2.   If w\bw, the file is writable; if -\b-, it is not writable.\n\n           3.   The first of the following that applies:\n\n                      S\bS     If in the owner permissions, the file is not\n                            executable and set-user-ID mode is set.  If in the\n                            group permissions, the file is not executable and\n                            set-group-ID mode is set.\n\n                      s\bs     If in the owner permissions, the file is executable\n                            and set-user-ID mode is set.  If in the group\n                            permissions, the file is executable and setgroup-ID\n                            mode is set.\n\n                      x\bx     The file is executable or the directory is\n                            searchable.\n\n                      -\b-     The file is neither readable, writable, executable,\n                            nor set-user-ID nor set-group-ID mode, nor sticky.\n                            (See below.)\n\n                These next two apply only to the third character in the last\n                group (other permissions).\n\n                      T\bT     The sticky bit is set (mode 1000), but not execute\n                            or search permission.  (See chmod(1) or sticky(7).)\n\n                      t\bt     The sticky bit is set (mode 1000), and is searchable\n                            or executable.  (See chmod(1) or sticky(7).)\n\n     The next field contains a plus (‚Äò+‚Äô) character if the file has an ACL, or a\n     space (‚Äò ‚Äô) if it does not.  The l\bls\bs utility does not show the actual ACL;\n     use getfacl(1) to do this.\n\nE\bEN\bNV\bVI\bIR\bRO\bON\bNM\bME\bEN\bNT\bT\n     The following environment variables affect the execution of l\bls\bs:\n\n     BLOCKSIZE           If this is set, its value, rounded up to 512 or down to\n                         a multiple of 512, will be used as the block size in\n                         bytes by the -\b-l\bl and -\b-s\bs options.  See _\bT_\bh_\be _\bL_\bo_\bn_\bg _\bF_\bo_\br_\bm_\ba_\bt\n                         subsection for more information.\n\n     CLICOLOR            Use ANSI color sequences to distinguish file types.\n                         See LSCOLORS below.  In addition to the file types\n                         mentioned in the -\b-F\bF option some extra attributes\n                         (setuid bit set, etc.) are also displayed.  The\n                         colorization is dependent on a terminal type with the\n                         proper termcap(5) capabilities.  The default ‚Äúcons25‚Äù\n                         console has the proper capabilities, but to display the\n                         colors in an xterm(1), for example, the TERM variable\n                         must be set to ‚Äúxterm-color‚Äù.  Other terminal types may\n                         require similar adjustments.  Colorization is silently\n                         disabled if the output is not directed to a terminal\n                         unless the CLICOLOR_FORCE variable is defined or\n                         -\b--\b-c\bco\bol\blo\bor\br is set to ‚Äúalways‚Äù.\n\n     CLICOLOR_FORCE      Color sequences are normally disabled if the output is\n                         not directed to a terminal.  This can be overridden by\n                         setting this variable.  The TERM variable still needs\n                         to reference a color capable terminal however otherwise\n                         it is not possible to determine which color sequences\n                         to use.\n\n     COLORTERM           See description for CLICOLOR above.\n\n     COLUMNS             If this variable contains a string representing a\n                         decimal integer, it is used as the column position\n                         width for displaying multiple-text-column output.  The\n                         l\bls\bs utility calculates how many pathname text columns to\n                         display based on the width provided.  (See -\b-C\bC and -\b-x\bx.)\n\n     LANG                The locale to use when determining the order of day and\n                         month in the long -\b-l\bl format output.  See environ(7) for\n                         more information.\n\n     LSCOLORS            The value of this variable describes what color to use\n                         for which attribute when colors are enabled with\n                         CLICOLOR or COLORTERM.  This string is a concatenation\n                         of pairs of the format _\bf_\bb, where _\bf is the foreground\n                         color and _\bb is the background color.\n\n                         The color designators are as follows:\n\n                               a\ba     black\n                               b\bb     red\n                               c\bc     green\n                               d\bd     brown\n                               e\be     blue\n                               f\bf     magenta\n                               g\bg     cyan\n                               h\bh     light grey\n                               A\bA     bold black, usually shows up as dark grey\n                               B\bB     bold red\n                               C\bC     bold green\n                               D\bD     bold brown, usually shows up as yellow\n                               E\bE     bold blue\n                               F\bF     bold magenta\n                               G\bG     bold cyan\n                               H\bH     bold light grey; looks like bright white\n                               x\bx     default foreground or background\n\n                         Note that the above are standard ANSI colors.  The\n                         actual display may differ depending on the color\n                         capabilities of the terminal in use.\n\n                         The order of the attributes are as follows:\n\n                               1.   directory\n                               2.   symbolic link\n                               3.   socket\n                               4.   pipe\n                               5.   executable\n                               6.   block special\n                               7.   character special\n                               8.   executable with setuid bit set\n                               9.   executable with setgid bit set\n                               10.  directory writable to others, with sticky\n                                    bit\n                               11.  directory writable to others, without sticky\n                                    bit\n\n                         The default is \"exfxcxdxbxegedabagacad\", i.e., blue\n                         foreground and default background for regular\n                         directories, black foreground and red background for\n                         setuid executables, etc.\n\n     LS_COLWIDTHS        If this variable is set, it is considered to be a\n                         colon-delimited list of minimum column widths.\n                         Unreasonable and insufficient widths are ignored (thus\n                         zero signifies a dynamically sized column).  Not all\n                         columns have changeable widths.  The fields are, in\n                         order: inode, block count, number of links, user name,\n                         group name, flags, file size, file name.\n\n     LS_SAMESORT         If this variable is set, the -\b-t\bt option sorts the names\n                         of files with the same modification timestamp in the\n                         same sense as the time sort.  See the description of\n                         the -\b-t\bt option for more details.\n\n     TERM                The CLICOLOR and COLORTERM functionality depends on a\n                         terminal type with color capabilities.\n\n     TZ                  The timezone to use when displaying dates.  See\n                         environ(7) for more information.\n\nE\bEX\bXI\bIT\bT S\bST\bTA\bAT\bTU\bUS\bS\n     The l\bls\bs utility exits¬†0 on success, and¬†&gt;0 if an error occurs.\n\nE\bEX\bXA\bAM\bMP\bPL\bLE\bES\bS\n     List the contents of the current working directory in long format:\n\n           $ ls -l\n\n     In addition to listing the contents of the current working directory in\n     long format, show inode numbers, file flags (see chflags(1)), and suffix\n     each filename with a symbol representing its file type:\n\n           $ ls -lioF\n\n     List the files in _\b/_\bv_\ba_\br_\b/_\bl_\bo_\bg, sorting the output such that the most recently\n     modified entries are printed first:\n\n           $ ls -lt /var/log\n\nC\bCO\bOM\bMP\bPA\bAT\bTI\bIB\bBI\bIL\bLI\bIT\bTY\bY\n     The group field is now automatically included in the long listing for files\n     in order to be compatible with the IEEE Std 1003.2 (‚ÄúPOSIX.2‚Äù)\n     specification.\n\nL\bLE\bEG\bGA\bAC\bCY\bY D\bDE\bES\bSC\bCR\bRI\bIP\bPT\bTI\bIO\bON\bN\n     In legacy mode, the -\b-f\bf option does not turn on the -\b-a\ba option and the -\b-g\bg,\n     -\b-n\bn, and -\b-o\bo options do not turn on the -\b-l\bl option.\n\n     Also, the -\b-o\bo option causes the file flags to be included in a long (-l)\n     output; there is no -\b-O\bO option.\n\n     When -\b-H\bH is specified (and not overridden by -\b-L\bL or -\b-P\bP) and a file argument\n     is a symlink that resolves to a non-directory file, the output will reflect\n     the nature of the link, rather than that of the file.  In legacy operation,\n     the output will describe the file.\n\n     For more information about legacy mode, see compat(5).\n\nS\bSE\bEE\bE A\bAL\bLS\bSO\bO\n     chflags(1), chmod(1), getfacl(1), sort(1), xterm(1), localeconv(3),\n     strftime(3), strmode(3), compat(5), termcap(5), sticky(7), symlink(7)\n\nS\bST\bTA\bAN\bND\bDA\bAR\bRD\bDS\bS\n     With the exception of options -\b-g\bg, -\b-n\bn and -\b-o\bo, the l\bls\bs utility conforms to\n     IEEE Std 1003.1-2001 (‚ÄúPOSIX.1‚Äù) and IEEE Std 1003.1-2008 (‚ÄúPOSIX.1‚Äù).  The\n     options -\b-B\bB, -\b-D\bD, -\b-G\bG, -\b-I\bI, -\b-T\bT, -\b-U\bU, -\b-W\bW, -\b-Z\bZ, -\b-b\bb, -\b-h\bh, -\b-w\bw, -\b-y\by and -\b-, are non-\n     standard extensions.\n\n     The ACL support is compatible with IEEE Std¬†1003.2c (‚ÄúPOSIX.2c‚Äù) Draft¬†17\n     (withdrawn).\n\nH\bHI\bIS\bST\bTO\bOR\bRY\bY\n     An l\bls\bs command appeared in Version¬†1 AT&T UNIX.\n\nB\bBU\bUG\bGS\bS\n     To maintain backward compatibility, the relationships between the many\n     options are quite complex.\n\n     The exception mentioned in the -\b-s\bs option description might be a feature\n     that was based on the fact that single-column output usually goes to\n     something other than a terminal.  It is debatable whether this is a design\n     bug.\n\n     IEEE Std 1003.2 (‚ÄúPOSIX.2‚Äù) mandates opposite sort orders for files with\n     the same timestamp when sorting with the -\b-t\bt option.\n\nmacOS 12.7                       August 31, 2020                      macOS 12.7"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#getting-help-with-man-1",
    "href": "lectures/lecture-03/03-command-line.html#getting-help-with-man-1",
    "title": "QTM 350 - Data Science Computing",
    "section": "Getting help with man",
    "text": "Getting help with man\n\n\n\nManual pages are shown in the shell pager. Here are the essentials to navigate through contents presented in the pager:\n\nd - Scroll down half a page\nu - Scroll up half a page\nj / k - Scroll down or up a line. You can also use the arrow keys for this\nq - Quit\n/pattern - Search for text provided as ‚Äúpattern‚Äù\nn - When searching, find the next occurrence\nN - When searching, find the previous occurrence\nThese and other man tricks are detailed in the help pages (hit ‚Äúh‚Äù when you‚Äôre in the pager for an overview).\n\n\n RTFM\nAlways check the documentation!"
  },
  {
    "objectID": "lectures/lecture-03/03-command-line.html#help-practice",
    "href": "lectures/lecture-03/03-command-line.html#help-practice",
    "title": "QTM 350 - Data Science Computing",
    "section": "Help practice!",
    "text": "Help practice!\n\n\nIn your Terminal, access the man and explore the document. I want you to share with a colleague your first impression and five commands you found interesting.\nPlease present your own (first impression + five commands) and colleague (first impression and five commands) views in the lecture quiz!\n\n\n\n\n\nCommand Line"
  },
  {
    "objectID": "lectures/lecture-02/LICENSE.html",
    "href": "lectures/lecture-02/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "lectures/lectures.html",
    "href": "lectures/lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "The course covers the following topics, with corresponding lecture materials available in the lectures folder. Please refer to the syllabus for additional suggested readings on each topic. Links will be added as the materials are posted.\n\nModule 01: Introduction to Python, Jupyter, and GitHub\n\nWednesday, August 28:\n\nSyllabus and course repository: https://github.com/danilofreire/qtm350.\nLecture 01: Welcome to QTM 350 - Introduction.\nCourse Tutorials: How to Install Anaconda, Jupyter, PostgreSQL, VSCode, and Open a Free Educational Account on GitHub.\n\nSuggested references:\n\nCleveland, W. S. (2001). Data science: An action plan for expanding the technical areas of the field of statistics. International Statistical Review, 69(1), 21-26.\nDonoho, D. (2017). 50 Years of Data Science. Journal of Computational and Graphical Statistics, 26(4), 745-766.\nBreiman, L. (2001). Statistical Modeling: The Two Cultures (with Comments and a Rejoinder by the Author). Statistical Science, 16(3), 199-231.\nBrady, H. E. (2019). The Challenge of Big Data and Data Science. Annual Review of Political Science, 22(1), 297-323.\nZitnik, M., Nguyen, F., Wang, B., Leskovec, J., Goldenberg, A., & Hoffman, M. M. (2019). Machine Learning for Integrating Data in Biology and Medicine: Principles, Practice, and Opportunities. Information Fusion, 50, 71-91.\n\n\n\nMonday, September 02: Labour Day (no class)\n\n\nWednesday, September 04:\n\nLecture 02: Computational Literacy.\nAssignment 01: Problem Set 01\n\nSuggested references:\n\nCampbell-Kelly, M., Aspray, W. F., Yost, J. R., Tinn, H., & D√≠az, G. C. (2023). Computer: A History of the Information Machine. Routledge.\nShalf, J. (2020). The Future of Computing beyond Moore‚Äôs Law. Philosophical Transactions of the Royal Society A, 378(2166), 20190061.\nAl-Hashimi, H. M. (2023). Turing, von Neumann, and The Computational Architecture of Biological Machines. Proceedings of the National Academy of Sciences, 120(25), e2220022120.\nWing, J. M. (2006). Computational Thinking. Communications of the ACM, 49(3), 33-35.\nVideos: David J. Malan - Abstraction, Khan Academy - Hexadecimal Number System, Matthias Wandel - Marble Adding Machine, Crash Course - Early Computing and Electronic Computing (the last two are quite entertaining!).\n\n\n\n\nModule 02: Introduction to the Command Line Interface and Version Control\n\nMonday September 09:\n\nLecture 03: The Command Line Interface (CLI), Shell Basics, and File Management.\n\nSuggested references:\n\nJanssens, J. (2021). Data science at the command line: Obtain, scrub, explore, and model data with Unix power tools (2nd ed.). O‚ÄôReilly Media.\nLevy, J. (2024). The art of command line. GitHub.\nShotts, W. (2019). The Linux Command Line: A Complete Introduction. No Starch Press.\nHealy, K. (2019). The Plain Person‚Äôs Guide to Plain Text Social Science. Chapters 1-5.\n\n\n\nWednesday, September 11:\n\nLecture 04: Command line tools, text files, scripting, and basics of Vim.\nAssignment 01 due (5%).\nAssignment 02: Problem Set 02.\n\nSuggested references:\n\nKerr, D. (2024). Effective Shell.\nIrianto, I. (2021). Learn Vim (the Smart Way).\nNeil, D. (2015). Practical Vim: Edit Text at the Speed of Thought. Pragmatic Bookshelf.\nVideos: freeCodeCamp - Command line crash course, Percy Grunwald - Absolute beginner guide to the macOS terminal, NetworkChuck - 50 macOS tips and tricks using terminal\n\n\n\nMonday, September 16:\n\nLecture 05: Version control with git and GitHub.\n\nSuggested references:\n\nChacon, S. and Straub, B. (2014). Pro Git. Apress. (Instructor‚Äôs note: this is the book on Git).\nGitHub tutorials: GitHub skills (recommended), Git guides, GitHub learning lab, Best practices for repositories.\n\n\n\nWednesday, September 18:\n\nLecture 06: More GitHub: pull requests, issues, pages, and collaboration features.\nAssignment 02 due (5%).\nAssignment 03: Problem Set 03.\n\nSuggested references:\n\nPerez-Riverol, Y., Gatto, L., Wang, R., Sachsenberg, T., Uszkoreit, J., Leprevost, F. da V., Fufezan, C., Ternent, T., Eglen, S. J., Katz, D. S., Pollard, T. J., Konovalov, A., Flight, R. M., Blin, K., & Vizca√≠no, J. A. (2016). Ten Simple Rules for Taking Advantage of Git and GitHub. PLOS Computational Biology, 12(7), e1004947.\nBeckman, M. D., √áetinkaya-Rundel, M., Horton, N. J., Rundel, C. W., Sullivan, A. J., & Tackett, M. (2021). Implementing version control with git and GitHub as a learning objective in statistics and data science courses. Journal of Statistics and Data Science Education, 29(sup1), S132-S144.\nEscamilla, E., Klein, M., Cooper, T., Rampin, V., Weigle, M. C., & Nelson, M. L. (2022). The Rise of GitHub in Scholarly Publications. arXiv preprint arXiv:2208.04895.\n\n\n\nMonday, September 23:\n\nLecture 07: Quiz 01: git and Github (6%).\n\n\n\n\nModule 03: Literate Programming with Markdown, Quarto, and Jupyter\n\nWednesday, September 25:\n\nLecture 08: Using Markdown, Jupyter, and Quarto for Reproducible Reports.\nAssignment 03 due (5%).\nAssignment 04: Problem Set 04.\n\nSuggested references:\n\nQuarto official website.\nAwesome Quarto: https://github.com/mcanouil/awesome-quarto. Note: this repository contains dozens of tutorials, examples, and resources.\n√áetinkaya-Rundel, M. & Lowndes, J. S. (2022) Keynote talk: Hello Quarto: Share ‚Ä¢ Collaborate ‚Ä¢ Teach ‚Ä¢ Reimagine. Slides and source code. This is one of the nicest Quarto presentations I have seen.\nGetting Started with Quarto (YouTube). Note: Posit (formerly RStudio) has a series of tutorials on Quarto on their YouTube channel. You can find their playlist here.\nMarkdown Guide.\nJupyter Notebooks Documentation.\nCodecademy - How to use Jupyter Notebooks\nCourse tutorial: Jupyter and Markdown\n\n\n\nMonday, September 30:\n\nLecture 09: Presentations with Quarto and GitHub Pages.\n\nSuggested references:\n\nQuarto Documentation - Presentations and Websites.\nGitHub Pages Documentation.\nFrench, J. (2023). Creating Websites with Quarto and GitHub Pages (YouTube Playlist).\nTaylor, I. (2022). Publishing a Quarto Site to GitHub Pages\n\n\n\nWednesday, October 02:\n\nLecture 10: Quiz 02: Literate Programming (6%).\nAssignment 05: Problem Set 05.\nAssignment 04 due (5%).\n\n\n\n\nModule 04: AI-Assisted Programming\n\nMonday, October 07:\n\nLecture 11: Introduction to AI-Assisted Programming and Chatbots.\n\nSuggested references:\n\nCihon, P. & Demirer, M. (2023). How AI-powered software development may affect labor markets. Brookings Institution\nPoldrack, R. A., Lu, T., & Begu≈°, G. (2023). AI-assisted Coding: Experiments with GPT-4. arXiv preprint arXiv:2304.13187.\nLau, S & Guo, P. (2023). From ‚ÄúBan It Till We Understand It‚Äù to ‚ÄúResistance is Futile‚Äù: How University Programming Instructors Plan to Adapt as More Students Use AI Code Generation and Explanation Tools such as ChatGPT and GitHub Copilot. In Proceedings of the 2023 ACM Conference on International Computing Education Research V.1 (ICER ‚Äô23 V1), August 07‚Äì11, 2023, Chicago, IL, USA. ACM, New York, NY, USA 16 Pages.\nLinus Torvalds Discusses the Impact of AI on Programming (YouTube).\n\n\n\nWednesday, October 09:\n\nLecture 12: AI-Assisted Programming with GitHub Copilot.\nAssignment 05 due (5%).\nAssignment 06: Problem Set 06.\n\nSuggested references:\n\nGitHub Copilot Documentation.\nUsing GitHub Copilot in your IDE: Tips, Tricks, and Best Practices\nUsing GitHub Copilot in the Command Line\nCoding with an AI Pair Programmer: Getting Started with GitHub Copilot (YouTube)\nGitHub Copilot YouTube Playlist\nLabadze, L., Grigolia, M., & Machaidze, L. (2023). Role of AI Chatbots in Education: Systematic Literature Review. International Journal of Educational Technology in Higher Education, 20(1), 56.\n\n\n\n\nModule 05: Data Manipulation with Python\n\nMonday, October 14: Fall Break (no class)\n\n\nWednesday, October 16:\n\nLecture 13: Python Data Types, Boolean Logic, and Control Structures.\nAssignment 06 due (5%).\nAssignment 07: Problem Set 07.\n\nSuggested references:\n\nPython Documentation: An Informal Introduction to Python.\nPython Documentation: More Control Flow Tools.\nPython Documentation: Compound Statements.\nNumPy Documentation: Quickstart Tutorial.\nProgramiz: Math Operations in Python.\nMatthes, E. (2019). Python Crash Course: A Hands-On, Project-Based Introduction to Programming (2nd ed.). No Starch Press. Chapter 02.\nSeverance, C. (2016). Python for Everybody: Exploring Data in Python 3. CreateSpace Independent Publishing Platform. Chapters 3-11 (Note: Read only the chapters which interest you).\n\n\n\nMonday, October 21:\n\nLecture 14: Pandas for Data Analysis: Loading, Cleaning, and Exploring Data.\n\n\n\nWednesday, October 23:\n\nLecture 15: Pandas for Data Analysis: Data Wrangling and Aggregating.\nAssignment 07 due (5%).\nAssignment 08: Problem Set 08.\n\nSuggested references:\n\nMcKinney, W. (2022). Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython (3rd ed.). O‚ÄôReilly Media. Chapter 05: Getting Started with Pandas.\nVanderPlas, J. (2016). Python Data Science Handbook: Essential Tools for Working with Data. O‚ÄôReilly Media. Chapter 3: Data Manipulation with Pandas.\nMcKinney, W. (2022). Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython (3rd ed.). O‚ÄôReilly Media. Chapter 07: Data Cleaning and Preparation.\nDataCamp: Pandas Tutorial: DataFrames in Python.\nReal Python: Pandas Tutorial: DataFrames in Python.\n\n\n\nMonday, October 28:\n\nLecture 16: Quiz 03: Python for Data Analysis (6%).\n\n\n\n\nModule 06: Introduction to SQL Databases\n\nWednesday, October 30:\n\nLecture 17: Introduction to PostgreSQL: Data Types, Tables, and Queries.\nAssignment 08 due (5%).\nAssignment 09: Problem Set 09.\nInstructions for the Final Project.\n\nSuggested references:\n\nMode Analytics: SQL Tutorial.\nReal Python: SQL Databases and SQLite.\nKhan Academy: SQL Basics. (Note: Khan Academy is a great resource for learning SQL and other programming languages).\nCoursera: PostgreSQL for Everybody.\nPostgreSQL Tutorial.\nPostgreSQL Documentation: SQL Commands. (Note: For reference only).\n\n\n\nMonday, November 04:\n\nLecture 18: Importing SQL Data into Python.\n\n\n\nWednesday, November 06:\n\nLecture 19: Merging Tables in SQL.\nAssignment 09 due (5%).\nAssignment 10: Problem Set 10.\n\nSuggested references:\n\nPandas Documentation: SQL Databases.\nReal Python: Working with SQLite Databases Using Python and Pandas.\nMode Analytics: SQL Joins.\nPostgreSQL Documentation: Joins Between Tables.\n\n\n\nMonday, November 11:\n\nLecture 20: Quiz 04: SQL Databases (6%).\n\n\n\n\nModule 07: Parallel Computing\n\nWednesday, November 13:\n\nLecture 21: Parallel Computing with Dask.\nAssignment 10 due (5%).\n\nSuggested references:\n\nDask Documentation\nDask Tutorial\nCoiled - Intro to Dask Tutorial (YouTube).\nRocklin, M. (2017). Dask: Flexible Library for Parallel Computing in Python. In Proceedings of the 16th Python in Science Conference (Vol. 126, p.¬†130).\n\n\n\nMonday, November 18:\n\nLecture 22: Application: Parallelising Data Analysis with Dask and AutoML.\n\nSuggested references:\n\nDask Documentation: Machine Learning.\nHe, X., Zhao, K., & Chu, X. (2021). AutoML: A Survey of the State-of-The-Art. Knowledge-based systems, 212, 106622.\nTPOT Documentation.\n\n\n\n\nModule 08: Containers and Reproducibility\n\nWednesday, November 20:\n\nLecture 23: Dependency Management, Virtual Environments, and Containers.\n\nSuggested references:\n\nDocker Documentation\n\n\n\nMonday, November 25:\n\nLecture 24: Docker for Data Science.\n\n\n\nWednesday, November 27: Thanksgiving Break (no class)\n\n\nMonday, December 02:\n\nLecture 25: Quiz 05: Dask, Docker and Containers (6%).\n\n\n\nWednesday, December 04:\n\nLecture 26: Review and Final Project Discussion.\n\n\n\nMonday, December 09:\n\nFinal Project due (20%).\n\n\n\n\n\n\n Back to top"
  }
]